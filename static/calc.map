{"version":3,"sources":["../node_modules/mithril/mithril.js","../node_modules/mithril/stream/stream.js","../node_modules/mithril/stream.js","products.js","calc.js"],"names":["module","exports","products","findProduct","name","find","p","loadProductProps","amount","product","Object","assign","key","Math","ceil","random","selectedProducts","loadSelectedProducts","savedProducts","JSON","parse","localStorage","getItem","i","length","push","removeSelectedProduct","ind","findIndex","splice","saveSelectedProducts","map","setItem","stringify","currentProduct","ProductSelector","view","vnode","onchange","m","withAttr","value","title","disabled","onclick","ProductTable","rows","summary","kcal","prot","fat","carb","weight","k","min","oninput","toFixed","gi","mount","document","body"],"mappings":"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","file":"calc.map","sourceRoot":"../js","sourcesContent":[";(function() {\n\"use strict\"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode(\"[\", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== \"object\") return Vnode(\"#\", undefined, undefined, node === false ? \"\" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*(\"|'|)((?:\\\\[\"'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction isEmpty(object) {\n\tfor (var key in object) if (hasOwn.call(object, key)) return false\n\treturn true\n}\nfunction compileSelector(selector) {\n\tvar match, tag = \"div\", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === \"\" && value !== \"\") tag = value\n\t\telse if (type === \"#\") attrs.id = value\n\t\telse if (type === \".\") classes.push(value)\n\t\telse if (match[3][0] === \"[\") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\([\"'])/g, \"$1\").replace(/\\\\\\\\/g, \"\\\\\")\n\t\t\tif (match[4] === \"class\") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === \"\" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(\" \")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tif (!isEmpty(state.attrs) && !isEmpty(attrs)) {\n\t\tvar newAttrs = {}\n\t\tfor(var key in attrs) {\n\t\t\tif (hasOwn.call(attrs, key)) {\n\t\t\t\tnewAttrs[key] = attrs[key]\n\t\t\t}\n\t\t}\n\t\tattrs = newAttrs\n\t}\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + \" \" + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== \"key\") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === \"#\") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== \"string\" && typeof selector !== \"function\" && typeof selector.view !== \"function\") {\n\t\tthrow Error(\"The selector must be either a string or a component.\");\n\t}\n\tif (typeof selector === \"string\") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== \"object\" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === \"string\") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = \"\"\n\treturn Vnode(\"<\", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode(\"[\", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error(\"Promise must be called with `new`\")\n\tif (typeof executor !== \"function\") throw new TypeError(\"executor must be a function\")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === \"object\" || typeof value === \"function\") && typeof (then = value.then) === \"function\") {\n\t\t\t\t\tif (value === self) throw new TypeError(\"Promise can't be resolved w/ itself\")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error(\"Possible unhandled promise rejection:\", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== \"function\") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === \"function\" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === \"object\" || typeof list[i] === \"function\") && typeof list[i].then === \"function\") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== \"undefined\") {\n\tif (typeof window.Promise === \"undefined\") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== \"undefined\") {\n\tif (typeof global.Promise === \"undefined\") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== \"[object Object]\") return \"\"\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join(\"&\")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === \"[object Object]\") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== \"\" ? \"=\" + encodeURIComponent(value) : \"\"))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp(\"^file://\", \"i\")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === \"function\") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === \"string\") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = \"GET\"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === \"GET\" || args.method === \"TRACE\") ? false : (typeof args.useBody === \"boolean\" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== \"function\") args.serialize = typeof FormData !== \"undefined\" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== \"function\") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== \"function\") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === \"boolean\" ? args.async : true, typeof args.user === \"string\" ? args.user : undefined, typeof args.password === \"string\" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody && !(args.headers && args.headers.hasOwnProperty(\"Content-Type\"))) {\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize && !(args.headers && args.headers.hasOwnProperty(\"Accept\"))) {\n\t\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === \"function\") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don't throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || \"_mithril_\" + Math.round(Math.random() * 1e16) + \"_\" + callbackCount++\n\t\t\tvar script = $window.document.createElement(\"script\")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error(\"JSONP request failed\"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || \"callback\"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== \"\") {\n\t\t\tvar prefix = url.indexOf(\"?\") < 0 ? \"?\" : \"&\"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== \"\" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === \"function\") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar nameSpace = {\n\t\tsvg: \"http://www.w3.org/2000/svg\",\n\t\tmath: \"http://www.w3.org/1998/Math/MathML\"\n\t}\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === \"string\") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase \"#\": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase \"<\": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase \"[\": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: \"table\", thead: \"table\", tbody: \"table\", tfoot: \"table\", tr: \"tbody\", th: \"tr\", td: \"tr\", colgroup: \"table\", col: \"colgroup\"}[match1[1]] || \"div\"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tns = getNameSpace(vnode) || ns\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== \"\") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === \"function\") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === \"function\") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === \"string\") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase \"#\": updateText(old, vnode); break\n\t\t\t\t\tcase \"<\": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase \"[\": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\t\tif (vnode.tag === \"textarea\") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== \"\") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode(\"#\", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === \"<\") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error(\"Child node of a contenteditable must be trusted\")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === \"function\") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode._state.onbeforeremove === \"function\") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === \"string\") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === \"function\") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\tif (typeof vnode._state.onremove === \"function\") vnode._state.onremove.call(vnode.state, vnode)\n\t\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\t} else {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === \"key\" || key2 === \"is\" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== \"object\" || typeof value === \"undefined\" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(\":\")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === \"xlink\") {\n\t\t\telement.setAttributeNS(\"http://www.w3.org/1999/xlink\", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === \"o\" && key2[1] === \"n\" && typeof value === \"function\") updateEvent(vnode, key2, value)\n\t\telse if (key2 === \"style\") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\tif (key2 === \"value\") {\n\t\t\t\tvar normalized0 = \"\" + value // eslint-disable-line no-implicit-coercion\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === \"input\" || vnode.tag === \"textarea\") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"select\") {\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tif (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"option\" && old != null && vnode.dom.value === normalized0) return\n\t\t\t}\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === \"input\" && key2 === \"type\") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tif (value) element.setAttribute(key2, \"\")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === \"className\" ? \"class\" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === \"select\" && attrs2 != null) {\n\t\t\tif (\"value\" in attrs2) setAttr(vnode, \"value\", null, attrs2.value, undefined)\n\t\t\tif (\"selectedIndex\" in attrs2) setAttr(vnode, \"selectedIndex\", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === \"className\") key2 = \"class\"\n\t\t\t\t\tif (key2[0] === \"o\" && key2[1] === \"n\" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== \"key\") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === \"value\" || attr === \"checked\" || attr === \"selectedIndex\" || attr === \"selected\" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === \"oninit\" || attr === \"oncreate\" || attr === \"onupdate\" || attr === \"onremove\" || attr === \"onbeforeremove\" || attr === \"onbeforeupdate\"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === \"href\" || attr === \"list\" || attr === \"form\" || attr === \"width\" || attr === \"height\"// || attr === \"type\"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf(\"-\") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = \"\", old = null\n\t\tif (style == null) element.style.cssText = \"\"\n\t\telse if (typeof style === \"string\") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === \"string\") element.style.cssText = \"\"\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== \"string\") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== \"function\" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === \"function\" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === \"function\") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === \"function\") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === \"function\") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \"function\") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode._state.onbeforeupdate === \"function\") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\tvar namespace = dom.namespaceURI\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = \"\"\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === \"http://www.w3.org/1999/xhtml\" ? undefined : namespace)\n\t\tdom.vnodes = vnodes\n\t\t// document.activeElement can return null in IE https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement\n\t\tif (active != null && $doc.activeElement !== active) active.focus()\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === \"function\" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw === false) e.redraw = undefined\n\t\telse redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== \"function\") throw new Error(\"m.mount(element, component) expects a component, not a vnode\")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === \"\" || string == null) return {}\n\tif (string.charAt(0) === \"?\") string = string.slice(1)\n\tvar entries = string.split(\"&\"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split(\"=\")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : \"\"\n\t\tif (value === \"true\") value = true\n\t\telse if (value === \"false\") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf(\"[\") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == \"\" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === \"\") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === \"function\"\n\tvar callAsync0 = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === \"pathname\" && data[0] !== \"/\") data = \"/\" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf(\"?\")\n\t\tvar hashIndex = path.indexOf(\"#\")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: \"#!\"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase \"#\": return normalize1(\"hash\").slice(router.prefix.length)\n\t\t\tcase \"?\": return normalize1(\"search\").slice(router.prefix.length) + normalize1(\"hash\")\n\t\t\tdefault: return normalize1(\"pathname\").slice(router.prefix.length) + normalize1(\"search\") + normalize1(\"hash\")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += \"?\" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += \"#\" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp(\"^\" + route0.replace(/:[^\\/]+?\\.{3}/g, \"(.*?)\").replace(/:[^\\/]+/g, \"([^\\\\/]+)\") + \"\\/?$\")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, \"\")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === \"#\") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error(\"Ensure the DOM element that was passed to `m.route` is not undefined\")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error(\"Could not resolve default route \" + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === \"function\" || typeof comp === \"function\")? comp : \"div\"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === \"function\") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, \"div\")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute(\"href\", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute(\"href\")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== \"undefined\" && typeof key3 !== \"undefined\") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = \"1.1.6\"\nm.vnode = Vnode\nif (typeof module !== \"undefined\") module[\"exports\"] = m\nelse window.m = m\n}());","/* eslint-disable */\n;(function() {\n\"use strict\"\n/* eslint-enable */\n\nvar guid = 0, HALT = {}\nfunction createStream() {\n\tfunction stream() {\n\t\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\t\treturn stream._state.value\n\t}\n\tinitStream(stream)\n\n\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\n\treturn stream\n}\nfunction initStream(stream) {\n\tstream.constructor = createStream\n\tstream._state = {id: guid++, value: undefined, state: 0, derive: undefined, recover: undefined, deps: {}, parents: [], endStream: undefined, unregister: undefined}\n\tstream.map = stream[\"fantasy-land/map\"] = map, stream[\"fantasy-land/ap\"] = ap, stream[\"fantasy-land/of\"] = createStream\n\tstream.valueOf = valueOf, stream.toJSON = toJSON, stream.toString = valueOf\n\n\tObject.defineProperties(stream, {\n\t\tend: {get: function() {\n\t\t\tif (!stream._state.endStream) {\n\t\t\t\tvar endStream = createStream()\n\t\t\t\tendStream.map(function(value) {\n\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\tunregisterStream(stream)\n\t\t\t\t\t\tendStream._state.unregister = function(){unregisterStream(endStream)}\n\t\t\t\t\t}\n\t\t\t\t\treturn value\n\t\t\t\t})\n\t\t\t\tstream._state.endStream = endStream\n\t\t\t}\n\t\t\treturn stream._state.endStream\n\t\t}}\n\t})\n}\nfunction updateStream(stream, value) {\n\tupdateState(stream, value)\n\tfor (var id in stream._state.deps) updateDependency(stream._state.deps[id], false)\n\tif (stream._state.unregister != null) stream._state.unregister()\n\tfinalize(stream)\n}\nfunction updateState(stream, value) {\n\tstream._state.value = value\n\tstream._state.changed = true\n\tif (stream._state.state !== 2) stream._state.state = 1\n}\nfunction updateDependency(stream, mustSync) {\n\tvar state = stream._state, parents = state.parents\n\tif (parents.length > 0 && parents.every(active) && (mustSync || parents.some(changed))) {\n\t\tvar value = stream._state.derive()\n\t\tif (value === HALT) return false\n\t\tupdateState(stream, value)\n\t}\n}\nfunction finalize(stream) {\n\tstream._state.changed = false\n\tfor (var id in stream._state.deps) stream._state.deps[id]._state.changed = false\n}\n\nfunction combine(fn, streams) {\n\tif (!streams.every(valid)) throw new Error(\"Ensure that each item passed to stream.combine/stream.merge is a stream\")\n\treturn initDependency(createStream(), streams, function() {\n\t\treturn fn.apply(this, streams.concat([streams.filter(changed)]))\n\t})\n}\n\nfunction initDependency(dep, streams, derive) {\n\tvar state = dep._state\n\tstate.derive = derive\n\tstate.parents = streams.filter(notEnded)\n\n\tregisterDependency(dep, state.parents)\n\tupdateDependency(dep, true)\n\n\treturn dep\n}\nfunction registerDependency(stream, parents) {\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tparents[i]._state.deps[stream._state.id] = stream\n\t\tregisterDependency(stream, parents[i]._state.parents)\n\t}\n}\nfunction unregisterStream(stream) {\n\tfor (var i = 0; i < stream._state.parents.length; i++) {\n\t\tvar parent = stream._state.parents[i]\n\t\tdelete parent._state.deps[stream._state.id]\n\t}\n\tfor (var id in stream._state.deps) {\n\t\tvar dependent = stream._state.deps[id]\n\t\tvar index = dependent._state.parents.indexOf(stream)\n\t\tif (index > -1) dependent._state.parents.splice(index, 1)\n\t}\n\tstream._state.state = 2 //ended\n\tstream._state.deps = {}\n}\n\nfunction map(fn) {return combine(function(stream) {return fn(stream())}, [this])}\nfunction ap(stream) {return combine(function(s1, s2) {return s1()(s2())}, [stream, this])}\nfunction valueOf() {return this._state.value}\nfunction toJSON() {return this._state.value != null && typeof this._state.value.toJSON === \"function\" ? this._state.value.toJSON() : this._state.value}\n\nfunction valid(stream) {return stream._state }\nfunction active(stream) {return stream._state.state === 1}\nfunction changed(stream) {return stream._state.changed}\nfunction notEnded(stream) {return stream._state.state !== 2}\n\nfunction merge(streams) {\n\treturn combine(function() {\n\t\treturn streams.map(function(s) {return s()})\n\t}, streams)\n}\n\nfunction scan(reducer, seed, stream) {\n\tvar newStream = combine(function (s) {\n\t\treturn seed = reducer(seed, s._state.value)\n\t}, [stream])\n\n\tif (newStream._state.state === 0) newStream(seed)\n\n\treturn newStream\n}\n\nfunction scanMerge(tuples, seed) {\n\tvar streams = tuples.map(function(tuple) {\n\t\tvar stream = tuple[0]\n\t\tif (stream._state.state === 0) stream(undefined)\n\t\treturn stream\n\t})\n\n\tvar newStream = combine(function() {\n\t\tvar changed = arguments[arguments.length - 1]\n\n\t\tstreams.forEach(function(stream, idx) {\n\t\t\tif (changed.indexOf(stream) > -1) {\n\t\t\t\tseed = tuples[idx][1](seed, stream._state.value)\n\t\t\t}\n\t\t})\n\n\t\treturn seed\n\t}, streams)\n\n\treturn newStream\n}\n\ncreateStream[\"fantasy-land/of\"] = createStream\ncreateStream.merge = merge\ncreateStream.combine = combine\ncreateStream.scan = scan\ncreateStream.scanMerge = scanMerge\ncreateStream.HALT = HALT\n\nif (typeof module !== \"undefined\") module[\"exports\"] = createStream\nelse if (typeof window.m === \"function\" && !(\"stream\" in window.m)) window.m.stream = createStream\nelse window.m = {stream : createStream}\n\n}());\n","\"use strict\"\n\nmodule.exports = require(\"./stream/stream\")\n","module.exports = { products: [{\"name\": \"\\u0410\\u0431\\u0440\\u0438\\u043a\\u043e\\u0441\\u043e\\u0432\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.9, \"fat\": 0.2, \"carb\": 9.2, \"kcal\": 39.0, \"gi\": 55.0}, {\"name\": \"\\u0410\\u0431\\u0440\\u0438\\u043a\\u043e\\u0441\\u044b\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 10.1, \"kcal\": 44.0, \"gi\": 30.0}, {\"name\": \"\\u0410\\u0432\\u043e\\u043a\\u0430\\u0434\\u043e\", \"prot\": 2.0, \"fat\": 15.0, \"carb\": 9.0, \"kcal\": 160.0, \"gi\": 10.0}, {\"name\": \"\\u0410\\u0433\\u0430\\u0432\\u0430 (\\u0441\\u0438\\u0440\\u043e\\u043f)\", \"prot\": 0.0, \"fat\": 0.5, \"carb\": 76.0, \"kcal\": 310.0, \"gi\": 15.0}, {\"name\": \"\\u0410\\u0439\\u0432\\u0430\", \"prot\": 0.6, \"fat\": 0.0, \"carb\": 8.7, \"kcal\": 37.0, \"gi\": 35.0}, {\"name\": \"\\u0410\\u043b\\u044b\\u0447\\u0430\", \"prot\": 0.3, \"fat\": 0.0, \"carb\": 7.6, \"kcal\": 35.0, \"gi\": 35.0}, {\"name\": \"\\u0410\\u043d\\u0430\\u043d\\u0430\\u0441\", \"prot\": 0.3, \"fat\": 0.0, \"carb\": 11.9, \"kcal\": 49.0, \"gi\": 70.0}, {\"name\": \"\\u0410\\u043d\\u0430\\u043d\\u0430\\u0441\\u043e\\u0432\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.2, \"fat\": 0.2, \"carb\": 11.4, \"kcal\": 48.0, \"gi\": 55.0}, {\"name\": \"\\u0410\\u043f\\u0435\\u043b\\u044c\\u0441\\u0438\\u043d\", \"prot\": 0.8, \"fat\": 0.0, \"carb\": 8.6, \"kcal\": 38.0, \"gi\": 50.0}, {\"name\": \"\\u0410\\u043f\\u0435\\u043b\\u044c\\u0441\\u0438\\u043d\\u043e\\u0432\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.9, \"fat\": 0.1, \"carb\": 8.4, \"kcal\": 36.0, \"gi\": 65.0}, {\"name\": \"\\u0410\\u0440\\u0430\\u0445\\u0438\\u0441\", \"prot\": 26.2, \"fat\": 49.0, \"carb\": 16.0, \"kcal\": 567.0, \"gi\": 15.0}, {\"name\": \"\\u0410\\u0440\\u0430\\u0445\\u0438\\u0441\\u043e\\u0432\\u0430\\u044f \\u043f\\u0430\\u0441\\u0442\\u0430 \\u0431\\u0441\", \"prot\": 25.0, \"fat\": 50.0, \"carb\": 20.0, \"kcal\": 588.0, \"gi\": 20.0}, {\"name\": \"\\u0410\\u0440\\u0431\\u0443\\u0437\", \"prot\": 0.6, \"fat\": 0.2, \"carb\": 8.0, \"kcal\": 30.0, \"gi\": 75.0}, {\"name\": \"\\u0410\\u0440\\u0442\\u0438\\u0448\\u043e\\u043a\", \"prot\": 1.2, \"fat\": 0.1, \"carb\": 6.0, \"kcal\": 28.0, \"gi\": 20.0}, {\"name\": \"\\u0411\\u0430\\u0437\\u0438\\u043b\\u0438\\u043a\", \"prot\": 3.2, \"fat\": 0.6, \"carb\": 2.7, \"kcal\": 22.0, \"gi\": 5.0}, {\"name\": \"\\u0411\\u0430\\u043a\\u043b\\u0430\\u0436\\u0430\\u043d\\u044b\", \"prot\": 1.0, \"fat\": 0.2, \"carb\": 6.0, \"kcal\": 25.0, \"gi\": 20.0}, {\"name\": \"\\u0411\\u0430\\u043d\\u0430\\u043d\\u044b\", \"prot\": 1.7, \"fat\": 0.0, \"carb\": 22.1, \"kcal\": 87.0, \"gi\": 60.0}, {\"carb\": 0.0, \"prot\": 16.2, \"name\": \"\\u0411\\u0430\\u0440\\u0430\\u043d\\u0438\\u043d\\u0430\", \"fat\": 15.3, \"kcal\": 201.0}, {\"name\": \"\\u0411\\u0430\\u0440\\u0430\\u043d\\u043a\\u0438\", \"prot\": 16.4, \"fat\": 1.1, \"carb\": 69.7, \"kcal\": 342.0, \"gi\": 95.0}, {\"carb\": 0.0, \"prot\": 13.6, \"name\": \"\\u0411\\u0430\\u0440\\u0430\\u043d\\u044c\\u0435 \\u0421\\u0435\\u0440\\u0434\\u0446\\u0435\", \"fat\": 2.7, \"kcal\": 85.0}, {\"carb\": 0.0, \"prot\": 13.4, \"name\": \"\\u0411\\u0430\\u0440\\u0430\\u043d\\u044c\\u0438 \\u041f\\u043e\\u0447\\u043a\\u0438\", \"fat\": 2.6, \"kcal\": 78.0}, {\"carb\": 0.0, \"prot\": 18.9, \"name\": \"\\u0411\\u0430\\u0440\\u0430\\u043d\\u044c\\u044f \\u041f\\u0435\\u0447\\u0435\\u043d\\u044c\", \"fat\": 2.8, \"kcal\": 102.0}, {\"name\": \"\\u0411\\u0430\\u0442\\u043e\\u043d \\u043d\\u0430\\u0440\\u0435\\u0437\\u043d\\u043e\\u0439\", \"prot\": 9.4, \"fat\": 2.7, \"carb\": 50.7, \"kcal\": 261.0, \"gi\": 100.0}, {\"carb\": 0.0, \"prot\": 23.0, \"name\": \"\\u0411\\u0435\\u043a\\u043e\\u043d\", \"fat\": 45.0, \"kcal\": 500.0}, {\"name\": \"\\u0411\\u0435\\u043b\\u044b\\u0435 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 3.3, \"fat\": 1.5, \"carb\": 2.4, \"kcal\": 32.0, \"gi\": 15.0}, {\"name\": \"\\u0411\\u0435\\u043b\\u044b\\u0435 \\u0441\\u0443\\u0448\\u0435\\u043d\\u044b\\u0435\", \"prot\": 23.8, \"fat\": 6.8, \"carb\": 30.2, \"kcal\": 277.0, \"gi\": 15.0}, {\"name\": \"\\u0411\\u043e\\u0431\\u044b\", \"prot\": 6.1, \"fat\": 0.1, \"carb\": 8.1, \"kcal\": 59.0, \"gi\": 25.0}, {\"carb\": 1.0, \"prot\": 0.0, \"name\": \"\\u0411\\u0440\\u0435\\u043d\\u0434\\u0438\", \"fat\": 0.0, \"kcal\": 225.0}, {\"name\": \"\\u0411\\u0440\\u043e\\u043a\\u043a\\u043e\\u043b\\u0438\", \"prot\": 3.0, \"fat\": 0.4, \"carb\": 5.2, \"kcal\": 28.0, \"gi\": 15.0}, {\"name\": \"\\u0411\\u0440\\u0443\\u0441\\u043d\\u0438\\u043a\\u0430\", \"prot\": 0.6, \"fat\": 0.0, \"carb\": 8.8, \"kcal\": 42.0, \"gi\": 30.0}, {\"name\": \"\\u0411\\u0440\\u044e\\u043a\\u0432\\u0430\", \"prot\": 1.2, \"fat\": 0.1, \"carb\": 8.4, \"kcal\": 38.0, \"gi\": 40.0}, {\"name\": \"\\u0411\\u0443\\u0431\\u043b\\u0438\\u043a\\u0438\", \"prot\": 16.4, \"fat\": 1.1, \"carb\": 69.7, \"kcal\": 342.0, \"gi\": 95.0}, {\"name\": \"\\u0411\\u0443\\u043b\\u0433\\u0443\\u0440\", \"prot\": 12.3, \"fat\": 1.3, \"carb\": 57.6, \"kcal\": 342.0, \"gi\": 50.0}, {\"name\": \"\\u0411\\u0443\\u043b\\u043e\\u0447\\u043a\\u0430\", \"prot\": 7.4, \"fat\": 1.8, \"carb\": 43.7, \"kcal\": 218.0, \"gi\": 95.0}, {\"carb\": 5.1, \"prot\": 12.7, \"name\": \"\\u0411\\u044b\\u0447\\u043a\\u0438\", \"fat\": 8.2, \"kcal\": 147.0}, {\"name\": \"\\u0412\\u0430\\u0440\\u0435\\u043d\\u044c\\u0435\", \"prot\": 0.4, \"fat\": 0.2, \"carb\": 74.5, \"kcal\": 286.0, \"gi\": 65.0}, {\"name\": \"\\u0412\\u0430\\u0444\\u043b\\u0438\", \"prot\": 8.2, \"fat\": 19.8, \"carb\": 53.1, \"kcal\": 425.0, \"gi\": 75.0}, {\"carb\": 15.9, \"prot\": 0.0, \"name\": \"\\u0412\\u0435\\u0440\\u043c\\u0443\\u0442\", \"fat\": 0.0, \"kcal\": 155.0}, {\"name\": \"\\u0412\\u0435\\u0448\\u0435\\u043d\\u043a\\u0438 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 2.5, \"fat\": 0.5, \"carb\": 6.2, \"kcal\": 34.0, \"gi\": 15.0}, {\"carb\": 20.0, \"prot\": 0.5, \"name\": \"\\u0412\\u0438\\u043d\\u043e \\u0434\\u0435\\u0441\\u0435\\u0440\\u0442\\u043d\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 175.0}, {\"carb\": 5.0, \"prot\": 0.2, \"name\": \"\\u0412\\u0438\\u043d\\u043e \\u043f\\u043e\\u043b\\u0443\\u0441\\u043b\\u0430\\u0434\\u043a\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 88.0}, {\"carb\": 2.5, \"prot\": 0.3, \"name\": \"\\u0412\\u0438\\u043d\\u043e \\u043f\\u043e\\u043b\\u0443\\u0441\\u0443\\u0445\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 78.0}, {\"carb\": 0.2, \"prot\": 0.2, \"name\": \"\\u0412\\u0438\\u043d\\u043e \\u0441\\u0442\\u043e\\u043b\\u043e\\u0432\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 67.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0412\\u0438\\u043d\\u043e \\u0441\\u0443\\u0445\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 66.0}, {\"name\": \"\\u0412\\u0438\\u043d\\u043e\\u0433\\u0440\\u0430\\u0434\", \"prot\": 0.5, \"fat\": 0.0, \"carb\": 17.8, \"kcal\": 73.0, \"gi\": 55.0}, {\"name\": \"\\u0412\\u0438\\u043d\\u043e\\u0433\\u0440\\u0430\\u0434\\u043d\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.3, \"fat\": 0.0, \"carb\": 14.5, \"kcal\": 56.0, \"gi\": 55.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0412\\u0438\\u0441\\u043a\\u0438\", \"fat\": 0.0, \"kcal\": 222.0}, {\"name\": \"\\u0412\\u0438\\u0448\\u043d\\u0435\\u0432\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.5, \"fat\": 0.0, \"carb\": 10.6, \"kcal\": 49.0, \"gi\": 55.0}, {\"name\": \"\\u0412\\u0438\\u0448\\u043d\\u044f\", \"prot\": 0.9, \"fat\": 0.0, \"carb\": 11.1, \"kcal\": 46.0, \"gi\": 25.0}, {\"carb\": 0.1, \"prot\": 0.0, \"name\": \"\\u0412\\u043e\\u0434\\u043a\\u0430\", \"fat\": 0.0, \"kcal\": 234.0}, {\"name\": \"\\u0413\\u0435\\u043c\\u0430\\u0442\\u043e\\u0433\\u0435\\u043d\", \"prot\": 6.2, \"fat\": 2.8, \"carb\": 75.5, \"kcal\": 352.0, \"gi\": 90.0}, {\"carb\": 0.0, \"prot\": 18.7, \"name\": \"\\u0413\\u043e\\u0432\\u044f\\u0434\\u0438\\u043d\\u0430\", \"fat\": 12.6, \"kcal\": 191.0}, {\"carb\": 0.0, \"prot\": 13.4, \"name\": \"\\u0413\\u043e\\u0432\\u044f\\u0436\\u0438\\u0439 \\u042f\\u0437\\u044b\\u043a\", \"fat\": 12.1, \"kcal\": 160.0}, {\"carb\": 0.0, \"prot\": 12.1, \"name\": \"\\u0413\\u043e\\u0432\\u044f\\u0436\\u044c\\u0435 \\u0412\\u044b\\u043c\\u044f\", \"fat\": 13.8, \"kcal\": 176.0}, {\"carb\": 0.0, \"prot\": 15.2, \"name\": \"\\u0413\\u043e\\u0432\\u044f\\u0436\\u044c\\u0435 \\u0421\\u0435\\u0440\\u0434\\u0446\\u0435\", \"fat\": 3.1, \"kcal\": 89.0}, {\"carb\": 0.0, \"prot\": 9.3, \"name\": \"\\u0413\\u043e\\u0432\\u044f\\u0436\\u044c\\u0438 \\u041c\\u043e\\u0437\\u0433\\u0438\", \"fat\": 9.6, \"kcal\": 126.0}, {\"carb\": 0.0, \"prot\": 12.4, \"name\": \"\\u0413\\u043e\\u0432\\u044f\\u0436\\u044c\\u0438 \\u041f\\u043e\\u0447\\u043a\\u0438\", \"fat\": 1.9, \"kcal\": 67.0}, {\"carb\": 0.0, \"prot\": 17.6, \"name\": \"\\u0413\\u043e\\u0432\\u044f\\u0436\\u044c\\u044f \\u041f\\u0435\\u0447\\u0435\\u043d\\u044c\", \"fat\": 3.2, \"kcal\": 100.0}, {\"name\": \"\\u0413\\u043e\\u043b\\u0443\\u0431\\u0438\\u043a\\u0430\", \"prot\": 1.1, \"fat\": 0.0, \"carb\": 7.4, \"kcal\": 35.0, \"gi\": 30.0}, {\"carb\": 0.0, \"prot\": 21.2, \"name\": \"\\u0413\\u043e\\u0440\\u0431\\u0443\\u0448\\u0430\", \"fat\": 7.1, \"kcal\": 151.0}, {\"name\": \"\\u0413\\u043e\\u0440\\u043e\\u0445 \\u0441\\u0443\\u0445\\u043e\\u0439\", \"prot\": 20.5, \"fat\": 2.0, \"carb\": 53.3, \"kcal\": 298.0, \"gi\": 25.0}, {\"name\": \"\\u0413\\u043e\\u0440\\u043e\\u0448\\u0435\\u043a \\u0437\\u0435\\u043b\\u0435\\u043d\\u044b\\u0439\", \"prot\": 5.4, \"fat\": 0.2, \"carb\": 13.6, \"kcal\": 75.0, \"gi\": 35.0}, {\"name\": \"\\u0413\\u043e\\u0440\\u043e\\u0448\\u0435\\u043a \\u043a\\u043e\\u043d\\u0441\\u0435\\u0440\\u0432\", \"prot\": 3.6, \"fat\": 0.1, \"carb\": 9.8, \"kcal\": 55.0, \"gi\": 45.0}, {\"name\": \"\\u0413\\u043e\\u0440\\u0447\\u0438\\u0446\\u0430\", \"prot\": 5.7, \"fat\": 6.4, \"carb\": 22.0, \"kcal\": 162.0, \"gi\": 55.0}, {\"name\": \"\\u0413\\u0440\\u0430\\u043d\\u0430\\u0442\", \"prot\": 0.9, \"fat\": 0.0, \"carb\": 11.9, \"kcal\": 53.0, \"gi\": 35.0}, {\"name\": \"\\u0413\\u0440\\u0430\\u043d\\u0430\\u0442\\u043e\\u0432\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.2, \"fat\": 0.0, \"carb\": 14.0, \"kcal\": 58.0, \"gi\": 35.0}, {\"name\": \"\\u0413\\u0440\\u0435\\u0439\\u043f\\u0444\\u0440\\u0443\\u0442\", \"prot\": 0.8, \"fat\": 0.0, \"carb\": 7.5, \"kcal\": 37.0, \"gi\": 45.0}, {\"name\": \"\\u0413\\u0440\\u0435\\u0446\\u043a\\u0438\\u0439 \\u043e\\u0440\\u0435\\u0445\", \"prot\": 15.0, \"fat\": 65.0, \"carb\": 14.0, \"kcal\": 654.0, \"gi\": 15.0}, {\"name\": \"\\u0413\\u0440\\u0435\\u0447\\u043a\\u0430\", \"prot\": 12.6, \"fat\": 3.3, \"carb\": 62.1, \"kcal\": 313.0, \"gi\": 50.0}, {\"name\": \"\\u0413\\u0440\\u0435\\u0447\\u043a\\u0430 \\u0437\\u0435\\u043b\\u0435\\u043d\\u0430\\u044f\", \"prot\": 12.6, \"fat\": 3.3, \"carb\": 62.1, \"kcal\": 313.0, \"gi\": 50.0}, {\"name\": \"\\u0413\\u0440\\u0435\\u0447\\u043d\\u0435\\u0432\\u0430\\u044f \\u043a\\u0430\\u0448\\u0430\", \"prot\": 4.5, \"fat\": 1.6, \"carb\": 27.4, \"kcal\": 137.0, \"gi\": 50.0}, {\"carb\": 0.0, \"prot\": 7.6, \"name\": \"\\u0413\\u0440\\u0443\\u0434\\u0438\\u043d\\u043a\\u0430 \\u0433\\u043e\\u0432\\u044f\\u0436\\u044c\\u044f \\u043a\\u043e\\u043f\\u0447.\", \"fat\": 66.8, \"kcal\": 632.0}, {\"name\": \"\\u0413\\u0440\\u0443\\u0448\\u0430\", \"prot\": 0.5, \"fat\": 0.0, \"carb\": 10.6, \"kcal\": 41.0, \"gi\": 30.0}, {\"carb\": 0.0, \"prot\": 16.4, \"name\": \"\\u0413\\u0443\\u0441\\u0438\", \"fat\": 33.1, \"kcal\": 359.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0414\\u0436\\u0438\\u043d\", \"fat\": 0.0, \"kcal\": 223.0}, {\"name\": \"\\u0414\\u0440\\u0430\\u0436\\u0435 \\u0444\\u0440\\u0443\\u043a\\u0442\\u043e\\u0432\\u043e\\u0435\", \"prot\": 3.7, \"fat\": 10.3, \"carb\": 73.4, \"kcal\": 388.0, \"gi\": 100.0}, {\"name\": \"\\u0414\\u044b\\u043d\\u044f\", \"prot\": 0.8, \"fat\": 0.3, \"carb\": 7.3, \"kcal\": 34.0, \"gi\": 75.0}, {\"name\": \"\\u0415\\u0436\\u0435\\u0432\\u0438\\u043a\\u0430\", \"prot\": 1.9, \"fat\": 0.0, \"carb\": 5.1, \"kcal\": 31.0, \"gi\": 20.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0416\\u0438\\u0440 \\u043a\\u0443\\u0440\\u0438\\u043d\\u044b\\u0439\", \"fat\": 99.7, \"kcal\": 896.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0416\\u0438\\u0440 \\u0441\\u0432\\u0438\\u043d\\u043e\\u0439 \\u0442\\u043e\\u043f\\u043b\\u0435\\u043d\\u044b\\u0439\", \"fat\": 99.5, \"kcal\": 882.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0417\\u0435\\u043b\\u0435\\u043d\\u044b\\u0439 \\u0447\\u0430\\u0439\", \"fat\": 0.0, \"kcal\": 0.0}, {\"name\": \"\\u0417\\u0435\\u043c\\u043b\\u044f\\u043d\\u0438\\u043a\\u0430\", \"prot\": 1.9, \"fat\": 0.0, \"carb\": 7.1, \"kcal\": 40.0, \"gi\": 25.0}, {\"name\": \"\\u0417\\u0435\\u0444\\u0438\\u0440\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 77.3, \"kcal\": 295.0, \"gi\": 100.0}, {\"name\": \"\\u0418\\u0437\\u044e\\u043c \\u043a\\u0438\\u0448\\u043c\\u0438\\u0448\", \"prot\": 2.5, \"fat\": 0.0, \"carb\": 71.4, \"kcal\": 285.0, \"gi\": 65.0}, {\"name\": \"\\u0418\\u0437\\u044e\\u043c \\u0441 \\u043a\\u043e\\u0441\\u0442\\u043e\\u0447\\u043a\\u043e\\u0439\", \"prot\": 1.7, \"fat\": 0.0, \"carb\": 70.7, \"kcal\": 273.0, \"gi\": 65.0}, {\"carb\": 0.0, \"prot\": 31.6, \"name\": \"\\u0418\\u043a\\u0440\\u0430 \\u043a\\u0435\\u0442\\u044b\", \"fat\": 13.7, \"kcal\": 250.0}, {\"carb\": 0.0, \"prot\": 24.6, \"name\": \"\\u0418\\u043a\\u0440\\u0430 \\u043b\\u0435\\u0449\\u0435\\u0432\\u0430\\u044f\", \"fat\": 4.9, \"kcal\": 144.0}, {\"carb\": 0.0, \"prot\": 28.3, \"name\": \"\\u0418\\u043a\\u0440\\u0430 \\u043c\\u0438\\u043d\\u0442\\u0430\\u044f\", \"fat\": 1.8, \"kcal\": 127.0}, {\"carb\": 0.0, \"prot\": 36.3, \"name\": \"\\u0418\\u043a\\u0440\\u0430 \\u043e\\u0441\\u0435\\u0442\\u0440\\u043e\\u0432\\u0430\\u044f\", \"fat\": 10.1, \"kcal\": 235.0}, {\"name\": \"\\u0418\\u043c\\u0431\\u0438\\u0440\\u044c\", \"prot\": 1.8, \"fat\": 0.8, \"carb\": 18.0, \"kcal\": 80.0, \"gi\": 15.0}, {\"carb\": 0.6, \"prot\": 21.1, \"name\": \"\\u0418\\u043d\\u0434\\u0435\\u0439\\u043a\\u0430\", \"fat\": 12.3, \"kcal\": 192.0}, {\"name\": \"\\u0418\\u043d\\u0436\\u0438\\u0440\", \"prot\": 0.9, \"fat\": 0.0, \"carb\": 13.7, \"kcal\": 57.0, \"gi\": 50.0}, {\"name\": \"\\u0418\\u0440\\u0438\\u0441\", \"prot\": 3.1, \"fat\": 7.7, \"carb\": 81.2, \"kcal\": 384.0, \"gi\": 100.0}, {\"name\": \"\\u0419\\u043e\\u0433\\u0443\\u0440\\u0442 1.5%\", \"prot\": 4.3, \"fat\": 1.5, \"carb\": 8.4, \"kcal\": 65.0, \"gi\": 35.0}, {\"name\": \"\\u0419\\u043e\\u0433\\u0443\\u0440\\u0442 3.2%\", \"prot\": 5.0, \"fat\": 3.2, \"carb\": 8.9, \"kcal\": 87.0, \"gi\": 35.0}, {\"name\": \"\\u041a\\u0430\\u0431\\u0430\\u0447\\u043a\\u0438\", \"prot\": 1.2, \"fat\": 0.3, \"carb\": 3.1, \"kcal\": 17.0, \"gi\": 15.0}, {\"carb\": 33.1, \"prot\": 24.0, \"name\": \"\\u041a\\u0430\\u043a\\u0430\\u043e \\u043d\\u0430 \\u043c\\u043e\\u043b\\u043e\\u043a\\u0435\", \"fat\": 17.0, \"kcal\": 377.0}, {\"carb\": 0.0, \"prot\": 18.2, \"name\": \"\\u041a\\u0430\\u043b\\u044c\\u043c\\u0430\\u0440\", \"fat\": 0.2, \"kcal\": 77.0}, {\"carb\": 0.0, \"prot\": 16.0, \"name\": \"\\u041a\\u0430\\u043c\\u0431\\u0430\\u043b\\u0430\", \"fat\": 2.5, \"kcal\": 86.0}, {\"name\": \"\\u041a\\u0430\\u043f\\u0443\\u0441\\u0442\\u0430 \\u0431\\u0435\\u043b\\u043e\\u043a\\u043e\\u0447\\u0430\\u043d\\u043d\\u0430\\u044f\", \"prot\": 1.3, \"fat\": 0.1, \"carb\": 6.0, \"kcal\": 25.0, \"gi\": 15.0}, {\"name\": \"\\u041a\\u0430\\u043f\\u0443\\u0441\\u0442\\u0430 \\u0431\\u0440\\u044e\\u0441\\u0441\\u0435\\u043b\\u044c\\u0441\\u043a\\u0430\\u044f\", \"prot\": 3.4, \"fat\": 0.3, \"carb\": 9.0, \"kcal\": 43.0, \"gi\": 15.0}, {\"name\": \"\\u041a\\u0430\\u043f\\u0443\\u0441\\u0442\\u0430 \\u043a\\u0440\\u0430\\u0441\\u043d\\u043e\\u043a\\u043e\\u0447\\u0430\\u043d\\u043d\\u0430\\u044f\", \"prot\": 1.4, \"fat\": 0.2, \"carb\": 7.0, \"kcal\": 31.0, \"gi\": 15.0}, {\"name\": \"\\u041a\\u0430\\u043f\\u0443\\u0441\\u0442\\u0430 \\u043f\\u0435\\u043a\\u0438\\u043d\\u0441\\u043a\\u0430\\u044f\", \"prot\": 1.2, \"fat\": 0.2, \"carb\": 2.0, \"kcal\": 16.0, \"gi\": 15.0}, {\"name\": \"\\u041a\\u0430\\u043f\\u0443\\u0441\\u0442\\u0430 \\u0446\\u0432\\u0435\\u0442\\u043d\\u0430\\u044f\", \"prot\": 1.9, \"fat\": 0.3, \"carb\": 5.0, \"kcal\": 25.0, \"gi\": 15.0}, {\"name\": \"\\u041a\\u0430\\u0440\\u0430\\u043c\\u0435\\u043b\\u044c\", \"prot\": 0.0, \"fat\": 0.2, \"carb\": 77.3, \"kcal\": 291.0, \"gi\": 100.0}, {\"carb\": 0.0, \"prot\": 17.5, \"name\": \"\\u041a\\u0430\\u0440\\u0430\\u0441\\u044c\", \"fat\": 1.6, \"kcal\": 84.0}, {\"carb\": 0.0, \"prot\": 16.0, \"name\": \"\\u041a\\u0430\\u0440\\u043f\", \"fat\": 3.5, \"kcal\": 95.0}, {\"carb\": 0.0, \"prot\": 40.0, \"name\": \"\\u041a\\u0430\\u0440\\u043f\\u0430\\u0447\\u0447\\u043e\", \"fat\": 16.0, \"kcal\": 322.0}, {\"name\": \"\\u041a\\u0430\\u0440\\u0442\\u043e\\u0444\\u0435\\u043b\\u044c \\u0432\\u0430\\u0440\\u0435\\u043d\\u044b\\u0439\", \"prot\": 2.0, \"fat\": 0.3, \"carb\": 16.5, \"kcal\": 80.0, \"gi\": 65.0}, {\"name\": \"\\u041a\\u0430\\u0440\\u0442\\u043e\\u0444\\u0435\\u043b\\u044c \\u0436\\u0430\\u0440\\u0435\\u043d\\u044b\\u0439\", \"prot\": 2.6, \"fat\": 9.7, \"carb\": 23.5, \"kcal\": 198.0, \"gi\": 95.0}, {\"name\": \"\\u041a\\u0430\\u0440\\u0442\\u043e\\u0444\\u0435\\u043b\\u044c \\u043c\\u043e\\u043b\\u043e\\u0434\\u043e\\u0439\", \"prot\": 2.2, \"fat\": 0.3, \"carb\": 12.5, \"kcal\": 57.0, \"gi\": 95.0}, {\"name\": \"\\u041a\\u0430\\u0442\\u044b\\u043a 6%\", \"prot\": 2.8, \"fat\": 6.0, \"carb\": 3.6, \"kcal\": 80.0, \"gi\": 30.0}, {\"carb\": 5.0, \"prot\": 0.2, \"name\": \"\\u041a\\u0432\\u0430\\u0441 \\u0445\\u043b\\u0435\\u0431\\u043d\\u044b\\u0439\", \"fat\": 0.0, \"kcal\": 26.0}, {\"name\": \"\\u041a\\u0435\\u0434\\u0440\\u043e\\u0432\\u044b\\u0439 \\u043e\\u0440\\u0435\\u0445\", \"prot\": 14.0, \"fat\": 68.0, \"carb\": 13.0, \"kcal\": 673.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 22.1, \"name\": \"\\u041a\\u0435\\u0442\\u0430\", \"fat\": 5.8, \"kcal\": 138.0}, {\"name\": \"\\u041a\\u0435\\u0442\\u0447\\u0443\\u043f\", \"prot\": 1.3, \"fat\": 0.2, \"carb\": 26.0, \"kcal\": 112.0, \"gi\": 55.0}, {\"name\": \"\\u041a\\u0435\\u0444\\u0438\\u0440 0%\", \"prot\": 2.8, \"fat\": 0.0, \"carb\": 3.8, \"kcal\": 29.0, \"gi\": 30.0}, {\"name\": \"\\u041a\\u0435\\u0444\\u0438\\u0440 1%\", \"prot\": 2.8, \"fat\": 1.0, \"carb\": 4.0, \"kcal\": 37.0, \"gi\": 30.0}, {\"name\": \"\\u041a\\u0435\\u0444\\u0438\\u0440 2.5%\", \"prot\": 3.0, \"fat\": 2.5, \"carb\": 4.0, \"kcal\": 51.0, \"gi\": 30.0}, {\"name\": \"\\u041a\\u0435\\u0444\\u0438\\u0440 3.2%\", \"prot\": 3.2, \"fat\": 3.2, \"carb\": 4.1, \"kcal\": 57.0, \"gi\": 30.0}, {\"name\": \"\\u041a\\u0435\\u0448\\u044c\\u044e\", \"prot\": 25.8, \"fat\": 54.3, \"carb\": 13.3, \"kcal\": 647.0, \"gi\": 15.0}, {\"name\": \"\\u041a\\u0438\\u0432\\u0438\", \"prot\": 1.0, \"fat\": 0.7, \"carb\": 9.7, \"kcal\": 46.0, \"gi\": 50.0}, {\"name\": \"\\u041a\\u0438\\u0437\\u0438\\u043b\", \"prot\": 1.1, \"fat\": 0.0, \"carb\": 9.4, \"kcal\": 42.0, \"gi\": 35.0}, {\"carb\": 0.0, \"prot\": 14.3, \"name\": \"\\u041a\\u0438\\u043b\\u044c\\u043a\\u0430\", \"fat\": 9.2, \"kcal\": 142.0}, {\"name\": \"\\u041a\\u0438\\u043d\\u0437\\u0430\", \"prot\": 2.1, \"fat\": 0.5, \"carb\": 1.9, \"kcal\": 23.0, \"gi\": 5.0}, {\"name\": \"\\u041a\\u0438\\u043d\\u043e\\u0430\", \"prot\": 14.1, \"fat\": 6.1, \"carb\": 57.2, \"kcal\": 368.0, \"gi\": 50.0}, {\"name\": \"\\u041a\\u043b\\u0443\\u0431\\u043d\\u0438\\u043a\\u0430\", \"prot\": 0.6, \"fat\": 0.4, \"carb\": 7.0, \"kcal\": 30.0, \"gi\": 25.0}, {\"name\": \"\\u041a\\u043b\\u044e\\u043a\\u0432\\u0430\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 4.9, \"kcal\": 27.0, \"gi\": 50.0}, {\"name\": \"\\u041a\\u043e\\u043a\\u043e\\u0441\", \"prot\": 3.3, \"fat\": 33.0, \"carb\": 15.0, \"kcal\": 354.0, \"gi\": 45.0}, {\"name\": \"\\u041a\\u043e\\u043a\\u043e\\u0441\\u043e\\u0432\\u0430\\u044f \\u0441\\u0442\\u0440\\u0443\\u0436\\u043a\\u0430\", \"prot\": 13.0, \"fat\": 65.0, \"carb\": 14.0, \"kcal\": 693.0, \"gi\": 45.0}, {\"name\": \"\\u041a\\u043e\\u043b\\u0430\", \"prot\": 0.0, \"fat\": 0.0, \"carb\": 10.0, \"kcal\": 40.0, \"gi\": 100.0}, {\"carb\": 0.0, \"prot\": 13.4, \"name\": \"\\u041a\\u043e\\u043b\\u0431\\u0430\\u0441\\u0430 \\u0414\\u043e\\u043a\\u0442\\u043e\\u0440\\u0441\\u043a\\u0430\\u044f\", \"fat\": 22.9, \"kcal\": 257.0}, {\"carb\": 0.0, \"prot\": 12.5, \"name\": \"\\u041a\\u043e\\u043b\\u0431\\u0430\\u0441\\u0430 \\u041b\\u044e\\u0431\\u0438\\u0442\\u0435\\u043b\\u044c\\u0441\\u043a\\u0430\\u044f\", \"fat\": 28.3, \"kcal\": 311.0}, {\"carb\": 0.0, \"prot\": 11.1, \"name\": \"\\u041a\\u043e\\u043b\\u0431\\u0430\\u0441\\u0430 \\u041c\\u043e\\u043b\\u043e\\u0447\\u043d\\u0430\\u044f\", \"fat\": 22.5, \"kcal\": 243.0}, {\"carb\": 0.0, \"prot\": 16.1, \"name\": \"\\u041a\\u043e\\u043b\\u0431\\u0430\\u0441\\u0430 \\u0421\\u0435\\u0440\\u0432\\u0435\\u043b\\u0430\\u0442\", \"fat\": 40.2, \"kcal\": 423.0}, {\"carb\": 0.0, \"prot\": 27.1, \"name\": \"\\u041a\\u043e\\u043b\\u0431\\u0430\\u0441\\u043a\\u0438 \\u043e\\u0445\\u043e\\u0442\\u043d\\u0438\\u0447\\u044c\\u0438\", \"fat\": 24.6, \"kcal\": 325.0}, {\"carb\": 0.0, \"prot\": 20.3, \"name\": \"\\u041a\\u043e\\u043d\\u0438\\u043d\\u0430\", \"fat\": 7.1, \"kcal\": 149.0}, {\"name\": \"\\u041a\\u043e\\u043d\\u0444\\u0435\\u0442\\u044b \\u0448\\u043e\\u043a\\u043e\\u043b\\u0430\\u0434\\u043d\\u044b\\u0435\", \"prot\": 3.9, \"fat\": 39.7, \"carb\": 54.6, \"kcal\": 576.0, \"gi\": 90.0}, {\"carb\": 0.1, \"prot\": 0.0, \"name\": \"\\u041a\\u043e\\u043d\\u044c\\u044f\\u043a\", \"fat\": 0.0, \"kcal\": 240.0}, {\"carb\": 0.0, \"prot\": 15.3, \"name\": \"\\u041a\\u043e\\u0440\\u044e\\u0448\\u043a\\u0430\", \"fat\": 3.3, \"kcal\": 93.0}, {\"carb\": 11.0, \"prot\": 0.8, \"name\": \"\\u041a\\u043e\\u0444\\u0435 \\u0441 \\u043c\\u043e\\u043b\\u043e\\u043a\\u043e\\u043c\", \"fat\": 1.0, \"kcal\": 56.0}, {\"carb\": 0.0, \"prot\": 16.0, \"name\": \"\\u041a\\u0440\\u0430\\u0431\\u043e\\u0432\\u043e\\u0435 \\u043c\\u044f\\u0441\\u043e\", \"fat\": 0.9, \"kcal\": 67.0}, {\"carb\": 0.0, \"prot\": 17.9, \"name\": \"\\u041a\\u0440\\u0430\\u0431\\u043e\\u0432\\u044b\\u0435 \\u043f\\u0430\\u043b\\u043e\\u0447\\u043a\\u0438\", \"fat\": 2.1, \"kcal\": 73.0}, {\"carb\": 0.0, \"prot\": 18.5, \"name\": \"\\u041a\\u0440\\u0430\\u0441\\u043d\\u043e\\u043f\\u0435\\u0440\\u043a\\u0430\", \"fat\": 3.1, \"kcal\": 106.0}, {\"carb\": 0.0, \"prot\": 18.0, \"name\": \"\\u041a\\u0440\\u0435\\u0432\\u0435\\u0442\\u043a\\u0430\", \"fat\": 0.9, \"kcal\": 85.0}, {\"carb\": 14.5, \"prot\": 10.6, \"name\": \"\\u041a\\u0440\\u043e\\u0432\\u044f\\u043d\\u043a\\u0430\", \"fat\": 17.8, \"kcal\": 261.0}, {\"carb\": 0.0, \"prot\": 20.6, \"name\": \"\\u041a\\u0440\\u043e\\u043b\\u0438\\u043a\", \"fat\": 12.8, \"kcal\": 197.0}, {\"name\": \"\\u041a\\u0440\\u044b\\u0436\\u043e\\u0432\\u043d\\u0438\\u043a\", \"prot\": 0.7, \"fat\": 0.2, \"carb\": 12.0, \"kcal\": 43.0, \"gi\": 25.0}, {\"name\": \"\\u041a\\u0443\\u043a\\u0443\\u0440\\u0443\\u0437\\u043d\\u044b\\u0435 \\u0445\\u043b\\u043e\\u043f\\u044c\\u044f\", \"prot\": 6.5, \"fat\": 2.9, \"carb\": 83.8, \"kcal\": 372.0, \"gi\": 85.0}, {\"name\": \"\\u041a\\u0443\\u043a\\u0443\\u0440\\u0443\\u0437\\u044b \\u0437\\u0451\\u0440\\u043d\\u0430\", \"prot\": 4.1, \"fat\": 2.3, \"carb\": 22.5, \"kcal\": 123.0, \"gi\": 55.0}, {\"name\": \"\\u041a\\u0443\\u043d\\u0436\\u0443\\u0442\", \"prot\": 19.4, \"fat\": 48.7, \"carb\": 12.2, \"kcal\": 565.0, \"gi\": 35.0}, {\"name\": \"\\u041a\\u0443\\u0440\\u0430\\u0433\\u0430\", \"prot\": 5.7, \"fat\": 0.0, \"carb\": 65.3, \"kcal\": 270.0, \"gi\": 40.0}, {\"carb\": 0.0, \"prot\": 21.3, \"name\": \"\\u041a\\u0443\\u0440\\u0438\\u0446\\u0430 \\u0431\\u0435\\u0434\\u0440\\u043e\", \"fat\": 11.0, \"kcal\": 185.0}, {\"carb\": 0.0, \"prot\": 25.2, \"name\": \"\\u041a\\u0443\\u0440\\u0438\\u0446\\u0430 \\u0432\\u0430\\u0440\\u0435\\u043d\\u0430\\u044f\", \"fat\": 7.4, \"kcal\": 170.0}, {\"carb\": 0.0, \"prot\": 27.0, \"name\": \"\\u041a\\u0443\\u0440\\u0438\\u0446\\u0430 \\u0433\\u043e\\u043b\\u0435\\u043d\\u044c\", \"fat\": 5.6, \"kcal\": 158.0}, {\"carb\": 0.0, \"prot\": 23.1, \"name\": \"\\u041a\\u0443\\u0440\\u0438\\u0446\\u0430 \\u0444\\u0438\\u043b\\u0435\", \"fat\": 1.2, \"kcal\": 110.0}, {\"carb\": 0.8, \"prot\": 20.4, \"name\": \"\\u041a\\u0443\\u0440\\u044b\", \"fat\": 8.6, \"kcal\": 161.0}, {\"name\": \"\\u041a\\u0443\\u0441\\u043a\\u0443\\u0441\", \"prot\": 12.8, \"fat\": 0.6, \"carb\": 72.4, \"kcal\": 376.0, \"gi\": 70.0}, {\"name\": \"\\u041b\\u0430\\u0432\\u0430\\u0448 \\u0430\\u0440\\u043c\\u044f\\u043d\\u0441\\u043a\\u0438\\u0439\", \"prot\": 7.7, \"fat\": 1.1, \"carb\": 47.8, \"kcal\": 239.0, \"gi\": 90.0}, {\"carb\": 0.0, \"prot\": 15.6, \"name\": \"\\u041b\\u0435\\u0434\\u044f\\u043d\\u0430\\u044f\", \"fat\": 1.3, \"kcal\": 76.0}, {\"carb\": 0.0, \"prot\": 17.2, \"name\": \"\\u041b\\u0435\\u0449\", \"fat\": 4.2, \"kcal\": 109.0}, {\"carb\": 53.0, \"prot\": 0.0, \"name\": \"\\u041b\\u0438\\u043a\\u0435\\u0440\", \"fat\": 0.0, \"kcal\": 344.0}, {\"name\": \"\\u041b\\u0438\\u043c\\u043e\\u043d\", \"prot\": 0.9, \"fat\": 0.0, \"carb\": 3.3, \"kcal\": 30.0, \"gi\": 40.0}, {\"name\": \"\\u041b\\u0438\\u043c\\u043e\\u043d\\u0430\\u0434\", \"prot\": 0.0, \"fat\": 0.0, \"carb\": 6.1, \"kcal\": 24.0, \"gi\": 100.0}, {\"name\": \"\\u041b\\u0438\\u043c\\u043e\\u043d\\u043d\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 1.0, \"fat\": 0.1, \"carb\": 3.2, \"kcal\": 18.0, \"gi\": 20.0}, {\"name\": \"\\u041b\\u0438\\u0441\\u0438\\u0447\\u043a\\u0438 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 1.5, \"fat\": 1.0, \"carb\": 2.4, \"kcal\": 22.0, \"gi\": 15.0}, {\"name\": \"\\u041b\\u0438\\u0441\\u0438\\u0447\\u043a\\u0438 \\u0441\\u0443\\u0448\\u0435\\u043d\\u044b\\u0435\", \"prot\": 22.0, \"fat\": 7.2, \"carb\": 25.4, \"kcal\": 268.0, \"gi\": 15.0}, {\"name\": \"\\u041b\\u0438\\u0447\\u0438\", \"prot\": 0.8, \"fat\": 0.4, \"carb\": 17.0, \"kcal\": 66.0, \"gi\": 50.0}, {\"carb\": 0.0, \"prot\": 19.2, \"name\": \"\\u041b\\u043e\\u0441\\u043e\\u0441\\u044c\", \"fat\": 13.8, \"kcal\": 200.0}, {\"name\": \"\\u041b\\u0443\\u043a \\u0437\\u0435\\u043b\\u0435\\u043d\\u044b\\u0439 (\\u043f\\u0435\\u0440\\u043e)\", \"prot\": 1.1, \"fat\": 0.1, \"carb\": 9.0, \"kcal\": 40.0, \"gi\": 15.0}, {\"name\": \"\\u041b\\u0443\\u043a \\u043f\\u043e\\u0440\\u0435\\u0439\", \"prot\": 1.5, \"fat\": 0.3, \"carb\": 14.0, \"kcal\": 61.0, \"gi\": 15.0}, {\"name\": \"\\u041b\\u0443\\u043a \\u0440\\u0435\\u043f\\u0447\\u0430\\u0442\\u044b\\u0439\", \"prot\": 1.6, \"fat\": 0.0, \"carb\": 9.3, \"kcal\": 41.0, \"gi\": 15.0}, {\"name\": \"\\u041b\\u0451\\u043d\", \"prot\": 18.3, \"fat\": 42.2, \"carb\": 28.9, \"kcal\": 534.0, \"gi\": 35.0}, {\"name\": \"\\u041c\\u0430\\u0439\\u043e\\u043d\\u0435\\u0437 67%\", \"prot\": 3.3, \"fat\": 67.0, \"carb\": 2.4, \"kcal\": 624.0, \"gi\": 60.0}, {\"name\": \"\\u041c\\u0430\\u043a\", \"prot\": 17.5, \"fat\": 47.5, \"carb\": 2.0, \"kcal\": 505.0, \"gi\": 35.0}, {\"name\": \"\\u041c\\u0430\\u043a\\u0430\\u0440\\u043e\\u043d\\u044b \\u043c\\u044f\\u0433\\u043a\", \"prot\": 10.4, \"fat\": 1.1, \"carb\": 69.7, \"kcal\": 337.0, \"gi\": 70.0}, {\"name\": \"\\u041c\\u0430\\u043a\\u0430\\u0440\\u043e\\u043d\\u044b \\u0441\\u0432\\u0430\\u0440\\u0435\\u043d\\u043d\\u044b\\u0435\", \"prot\": 3.4, \"fat\": 0.4, \"carb\": 23.1, \"kcal\": 111.0, \"gi\": 40.0}, {\"name\": \"\\u041c\\u0430\\u043a\\u0430\\u0440\\u043e\\u043d\\u044b \\u0442\\u0432\\u0435\\u0440\\u0434\", \"prot\": 10.4, \"fat\": 1.1, \"carb\": 69.7, \"kcal\": 337.0, \"gi\": 40.0}, {\"carb\": 0.0, \"prot\": 20.2, \"name\": \"\\u041c\\u0430\\u043a\\u0440\\u0435\\u043b\\u044c\", \"fat\": 3.6, \"kcal\": 111.0}, {\"name\": \"\\u041c\\u0430\\u043b\\u0438\\u043d\\u0430\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 9.2, \"kcal\": 43.0, \"gi\": 25.0}, {\"name\": \"\\u041c\\u0430\\u043d\\u0433\\u043e\", \"prot\": 0.6, \"fat\": 0.4, \"carb\": 11.8, \"kcal\": 69.0, \"gi\": 50.0}, {\"name\": \"\\u041c\\u0430\\u043d\\u0434\\u0430\\u0440\\u0438\\u043d\", \"prot\": 0.9, \"fat\": 0.0, \"carb\": 8.8, \"kcal\": 39.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u0430\\u043d\\u043a\\u0430\", \"prot\": 10.3, \"fat\": 1.0, \"carb\": 67.4, \"kcal\": 328.0, \"gi\": 70.0}, {\"name\": \"\\u041c\\u0430\\u043d\\u043d\\u0430\\u044f \\u043a\\u0430\\u0448\\u0430\", \"prot\": 2.5, \"fat\": 0.3, \"carb\": 16.4, \"kcal\": 77.0, \"gi\": 70.0}, {\"name\": \"\\u041c\\u0430\\u0440\\u0430\\u043a\\u0443\\u0439\\u044f\", \"prot\": 2.2, \"fat\": 0.7, \"carb\": 23.0, \"kcal\": 97.0, \"gi\": 30.0}, {\"carb\": 0.0, \"prot\": 0.5, \"name\": \"\\u041c\\u0430\\u0440\\u0433\\u0430\\u0440\\u0438\\u043d \\u0441\\u043b\\u0438\\u0432\\u043e\\u0447\\u043d\\u044b\\u0439\", \"fat\": 82.3, \"kcal\": 746.0}, {\"carb\": 0.9, \"prot\": 0.5, \"name\": \"\\u041c\\u0430\\u0440\\u0433\\u0430\\u0440\\u0438\\u043d \\u0441\\u0442\\u043e\\u043b\\u043e\\u0432\\u044b\\u0439\", \"fat\": 82.0, \"kcal\": 744.0}, {\"name\": \"\\u041c\\u0430\\u0440\\u043c\\u0435\\u043b\\u0430\\u0434\", \"prot\": 0.0, \"fat\": 0.2, \"carb\": 77.1, \"kcal\": 289.0, \"gi\": 65.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u041c\\u0430\\u0441\\u043b\\u043e \\u043a\\u043e\\u043a\\u043e\\u0441\\u043e\\u0432\\u043e\\u0435\", \"fat\": 99.9, \"kcal\": 899.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u041c\\u0430\\u0441\\u043b\\u043e \\u043a\\u0443\\u043d\\u0436\\u0443\\u0442\\u043d\\u043e\\u0435\", \"fat\": 99.9, \"kcal\": 899.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u041c\\u0430\\u0441\\u043b\\u043e \\u043b\\u044c\\u043d\\u044f\\u043d\\u043e\\u0435\", \"fat\": 99.8, \"kcal\": 898.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u041c\\u0430\\u0441\\u043b\\u043e \\u043e\\u043b\\u0438\\u0432\\u043a\\u043e\\u0432\\u043e\\u0435\", \"fat\": 99.8, \"kcal\": 898.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u041c\\u0430\\u0441\\u043b\\u043e \\u043f\\u043e\\u0434\\u0441\\u043e\\u043b\\u043d\\u0435\\u0447\\u043d\\u043e\\u0435\", \"fat\": 99.9, \"kcal\": 899.0}, {\"carb\": 1.0, \"prot\": 0.5, \"name\": \"\\u041c\\u0430\\u0441\\u043b\\u043e \\u0441\\u043b\\u0438\\u0432\\u043e\\u0447\\u043d\\u043e\\u0435 82.5%\", \"fat\": 82.5, \"kcal\": 747.0}, {\"carb\": 0.5, \"prot\": 0.4, \"name\": \"\\u041c\\u0430\\u0441\\u043b\\u043e \\u0442\\u043e\\u043f\\u043b\\u0435\\u043d\\u043e\\u0435\", \"fat\": 98.1, \"kcal\": 885.0}, {\"name\": \"\\u041c\\u0430\\u0441\\u043b\\u044f\\u0442\\u0430 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 2.5, \"fat\": 0.7, \"carb\": 1.5, \"kcal\": 12.0, \"gi\": 15.0}, {\"name\": \"\\u041c\\u0435\\u0434\", \"prot\": 0.6, \"fat\": 0.0, \"carb\": 80.5, \"kcal\": 312.0, \"gi\": 90.0}, {\"carb\": 0.0, \"prot\": 9.7, \"name\": \"\\u041c\\u0438\\u0434\\u0438\\u0438 \\u043e\\u0442\\u0432\\u0430\\u0440\\u043d\\u044b\\u0435\", \"fat\": 1.6, \"kcal\": 53.0}, {\"name\": \"\\u041c\\u0438\\u043d\\u0434\\u0430\\u043b\\u044c\", \"prot\": 18.3, \"fat\": 57.9, \"carb\": 13.4, \"kcal\": 643.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 15.7, \"name\": \"\\u041c\\u0438\\u043d\\u0442\\u0430\\u0439\", \"fat\": 0.6, \"kcal\": 67.0}, {\"carb\": 0.0, \"prot\": 13.1, \"name\": \"\\u041c\\u043e\\u0439\\u0432\\u0430\", \"fat\": 11.7, \"kcal\": 159.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e 0%\", \"prot\": 2.8, \"fat\": 0.0, \"carb\": 4.6, \"kcal\": 34.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e 1%\", \"prot\": 2.8, \"fat\": 1.0, \"carb\": 4.6, \"kcal\": 43.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e 2.5%\", \"prot\": 2.8, \"fat\": 2.5, \"carb\": 4.6, \"kcal\": 53.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e 3.2%\", \"prot\": 2.8, \"fat\": 3.2, \"carb\": 4.6, \"kcal\": 58.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e \\u043a\\u043e\\u0437\\u044c\\u0435 \\u0441\\u044b\\u0440\\u043e\\u0435\", \"prot\": 3.1, \"fat\": 4.2, \"carb\": 4.7, \"kcal\": 71.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e \\u043a\\u043e\\u0440\\u043e\\u0432\\u044c\\u0435 \\u0441\\u044b\\u0440\\u043e\\u0435\", \"prot\": 3.2, \"fat\": 3.6, \"carb\": 4.7, \"kcal\": 63.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e \\u043e\\u0431\\u0435\\u0437\\u0436\\u0438\\u0440\\u0435\\u043d\\u043d\\u043e\\u0435\", \"prot\": 2.1, \"fat\": 0.1, \"carb\": 4.5, \"kcal\": 30.0, \"gi\": 30.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e \\u0441\\u0433\\u0443\\u0449\\u0435\\u043d\\u043d\\u043e\\u0435\", \"prot\": 7.3, \"fat\": 7.7, \"carb\": 9.7, \"kcal\": 139.0, \"gi\": 100.0}, {\"name\": \"\\u041c\\u043e\\u043b\\u043e\\u043a\\u043e \\u0441\\u0443\\u0445\\u043e\\u0435 \\u0446\\u0435\\u043b\\u044c\\u043d\\u043e\\u0435\", \"prot\": 25.2, \"fat\": 25.0, \"carb\": 39.6, \"kcal\": 477.0, \"gi\": 30.0}, {\"carb\": 1.2, \"prot\": 9.1, \"name\": \"\\u041c\\u043e\\u0440\\u0435\\u043f\\u0440\\u043e\\u0434\\u0443\\u043a\\u0442\\u044b \\u0432 \\u043c\\u0430\\u0441\\u043b\\u0435\", \"fat\": 18.0, \"kcal\": 200.0}, {\"name\": \"\\u041c\\u043e\\u0440\\u043a\\u043e\\u0432\\u043d\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 1.0, \"fat\": 0.1, \"carb\": 6.5, \"kcal\": 31.0, \"gi\": 40.0}, {\"name\": \"\\u041c\\u043e\\u0440\\u043a\\u043e\\u0432\\u044c\", \"prot\": 1.3, \"fat\": 0.1, \"carb\": 6.3, \"kcal\": 29.0, \"gi\": 20.0}, {\"name\": \"\\u041c\\u043e\\u0440\\u043e\\u0436\\u0435\\u043d\\u043e\\u0435 \\u043f\\u043b\\u043e\\u043c\\u0431\\u0438\\u0440\", \"prot\": 3.6, \"fat\": 15.1, \"carb\": 20.5, \"kcal\": 223.0, \"gi\": 60.0}, {\"name\": \"\\u041c\\u043e\\u0440\\u043e\\u0436\\u0435\\u043d\\u043e\\u0435 \\u0441\\u043b\\u0438\\u0432\\u043e\\u0447\\u043d\\u043e\\u0435\", \"prot\": 3.6, \"fat\": 10.0, \"carb\": 19.5, \"kcal\": 182.0, \"gi\": 60.0}, {\"name\": \"\\u041c\\u043e\\u0440\\u043e\\u0436\\u0435\\u043d\\u043e\\u0435 \\u044d\\u0441\\u043a\\u0438\\u043c\\u043e\", \"prot\": 3.6, \"fat\": 20.0, \"carb\": 19.5, \"kcal\": 278.0, \"gi\": 60.0}, {\"name\": \"\\u041c\\u043e\\u0440\\u043e\\u0448\\u043a\\u0430\", \"prot\": 0.9, \"fat\": 0.0, \"carb\": 6.9, \"kcal\": 33.0, \"gi\": 35.0}, {\"name\": \"\\u041c\\u0443\\u043a\\u0430 \\u043f\\u0448\\u0435\\u043d. I \\u0441\\u043e\\u0440\\u0442\\u0430\", \"prot\": 10.6, \"fat\": 1.4, \"carb\": 73.6, \"kcal\": 329.0, \"gi\": 65.0}, {\"name\": \"\\u041c\\u0443\\u043a\\u0430 \\u043f\\u0448\\u0435\\u043d. II \\u0441\\u043e\\u0440\\u0442\\u0430\", \"prot\": 11.6, \"fat\": 1.9, \"carb\": 70.7, \"kcal\": 328.0, \"gi\": 65.0}, {\"name\": \"\\u041c\\u0443\\u043a\\u0430 \\u043f\\u0448\\u0435\\u043d. \\u0432\\u0441\", \"prot\": 10.4, \"fat\": 0.8, \"carb\": 74.5, \"kcal\": 324.0, \"gi\": 65.0}, {\"name\": \"\\u041c\\u0443\\u043a\\u0430 \\u0440\\u0436\\u0430\\u043d\\u0430\\u044f\", \"prot\": 6.8, \"fat\": 1.2, \"carb\": 76.8, \"kcal\": 321.0, \"gi\": 65.0}, {\"name\": \"\\u041c\\u0443\\u043a\\u0430 \\u0441\\u043e\\u0435\\u0432\\u0430\\u044f\", \"prot\": 48.9, \"fat\": 1.0, \"carb\": 21.7, \"kcal\": 291.0, \"gi\": 25.0}, {\"name\": \"\\u041c\\u0443\\u043a\\u0430 \\u0447\\u0435\\u0440\\u0435\\u043c\\u0443\\u0445\\u043e\\u0432\\u0430\\u044f\", \"prot\": 8.4, \"fat\": 0.0, \"carb\": 16.8, \"kcal\": 101.0, \"gi\": 25.0}, {\"carb\": 0.0, \"prot\": 16.71, \"name\": \"\\u041d\\u0430\\u0432\\u0430\\u0433\\u0430\", \"fat\": 1.3, \"kcal\": 78.0}, {\"carb\": 0.0, \"prot\": 18.6, \"name\": \"\\u041d\\u0430\\u043b\\u0438\\u043c\", \"fat\": 0.8, \"kcal\": 85.0}, {\"name\": \"\\u041d\\u0443\\u0442\", \"prot\": 19.0, \"fat\": 6.0, \"carb\": 61.0, \"kcal\": 364.0, \"gi\": 35.0}, {\"name\": \"\\u041e\\u0431\\u043b\\u0435\\u043f\\u0438\\u0445\\u0430\", \"prot\": 0.8, \"fat\": 0.0, \"carb\": 5.6, \"kcal\": 31.0, \"gi\": 35.0}, {\"name\": \"\\u041e\\u0432\\u0441\\u044f\\u043d\\u0430\\u044f \\u043a\\u0430\\u0448\\u0430\", \"prot\": 3.2, \"fat\": 1.8, \"carb\": 15.4, \"kcal\": 93.0, \"gi\": 60.0}, {\"name\": \"\\u041e\\u0432\\u0441\\u044f\\u043d\\u044b\\u0435 \\u0445\\u043b\\u043e\\u043f\\u044c\\u044f\", \"prot\": 11.9, \"fat\": 7.5, \"carb\": 69.1, \"kcal\": 358.0, \"gi\": 40.0}, {\"name\": \"\\u041e\\u0433\\u0443\\u0440\\u0446\\u044b \\u0433\\u0440\\u0443\\u043d\\u0442\\u043e\\u0432\\u044b\\u0435\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 3.1, \"kcal\": 15.0, \"gi\": 15.0}, {\"name\": \"\\u041e\\u0433\\u0443\\u0440\\u0446\\u044b \\u043c\\u0430\\u0440\\u0438\\u043d\\u043e\\u0432\\u0430\\u043d\\u043d\\u044b\\u0435\", \"prot\": 2.8, \"fat\": 0.0, \"carb\": 1.3, \"kcal\": 16.0, \"gi\": 15.0}, {\"name\": \"\\u041e\\u0433\\u0443\\u0440\\u0446\\u044b \\u043f\\u0430\\u0440\\u043d\\u0438\\u043a\\u043e\\u0432\\u044b\\u0435\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 1.6, \"kcal\": 9.0, \"gi\": 15.0}, {\"name\": \"\\u041e\\u0433\\u0443\\u0440\\u0446\\u044b \\u0441\\u043e\\u043b\\u0435\\u043d\\u044b\\u0435\", \"prot\": 0.8, \"fat\": 0.0, \"carb\": 1.7, \"kcal\": 11.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 17.4, \"name\": \"\\u041e\\u043a\\u0443\\u043d\\u044c \\u043c\\u043e\\u0440\\u0441\\u043a\\u043e\\u0439\", \"fat\": 5.5, \"kcal\": 123.0}, {\"carb\": 0.0, \"prot\": 18.3, \"name\": \"\\u041e\\u043a\\u0443\\u043d\\u044c \\u0440\\u0435\\u0447\\u043d\\u043e\\u0439\", \"fat\": 0.7, \"kcal\": 80.0}, {\"name\": \"\\u041e\\u043b\\u0438\\u0432\\u043a\\u0438\", \"prot\": 0.6, \"fat\": 10.2, \"carb\": 6.7, \"kcal\": 111.0, \"gi\": 15.0}, {\"carb\": 1.7, \"prot\": 9.7, \"name\": \"\\u041e\\u043c\\u043b\\u0435\\u0442\", \"fat\": 15.5, \"kcal\": 181.0}, {\"name\": \"\\u041e\\u043f\\u044f\\u0442\\u0430 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 2.4, \"fat\": 1.0, \"carb\": 2.5, \"kcal\": 25.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 16.5, \"name\": \"\\u041e\\u0441\\u0435\\u0442\\u0440\", \"fat\": 10.5, \"kcal\": 161.0}, {\"carb\": 0.0, \"prot\": 18.5, \"name\": \"\\u041e\\u0441\\u044c\\u043c\\u0438\\u043d\\u043e\\u0433\", \"fat\": 0.0, \"kcal\": 74.0}, {\"name\": \"\\u041e\\u0442\\u0440\\u0443\\u0431\\u0438\", \"prot\": 17.0, \"fat\": 7.0, \"carb\": 66.0, \"kcal\": 246.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 18.5, \"name\": \"\\u041f\\u0430\\u043b\\u0442\\u0443\\u0441\", \"fat\": 3.2, \"kcal\": 106.0}, {\"name\": \"\\u041f\\u0430\\u043c\\u0435\\u043b\\u043e\", \"prot\": 0.6, \"fat\": 0.1, \"carb\": 6.1, \"kcal\": 29.0, \"gi\": 45.0}, {\"name\": \"\\u041f\\u0430\\u0441\\u0442\\u0438\\u043b\\u0430\", \"prot\": 0.6, \"fat\": 0.0, \"carb\": 80.1, \"kcal\": 301.0, \"gi\": 100.0}, {\"name\": \"\\u041f\\u0430\\u0442\\u0438\\u0441\\u0441\\u043e\\u043d\\u044b \\u0441\\u043e\\u043b\\u0435\\u043d\\u044b\\u0435\", \"prot\": 0.8, \"fat\": 0.1, \"carb\": 1.7, \"kcal\": 11.0, \"gi\": 15.0}, {\"carb\": 7.0, \"prot\": 18.1, \"name\": \"\\u041f\\u0430\\u0448\\u0442\\u0435\\u0442 \\u0438\\u0437 \\u0433\\u043e\\u0432. \\u043f\\u0435\\u0447\\u0435\\u043d\\u0438\", \"fat\": 11.1, \"kcal\": 177.0}, {\"name\": \"\\u041f\\u0435\\u0440\\u0435\\u0446 \\u0437\\u0435\\u043b\\u0435\\u043d\\u044b\\u0439 \\u0441\\u043b\\u0430\\u0434\\u043a\\u0438\\u0439\", \"prot\": 1.2, \"fat\": 0.0, \"carb\": 4.8, \"kcal\": 24.0, \"gi\": 15.0}, {\"name\": \"\\u041f\\u0435\\u0440\\u0435\\u0446 \\u043a\\u0440\\u0430\\u0441\\u043d\\u044b\\u0439 \\u0441\\u043b\\u0430\\u0434\\u043a\\u0438\\u0439\", \"prot\": 1.2, \"fat\": 0.0, \"carb\": 5.5, \"kcal\": 26.0, \"gi\": 15.0}, {\"name\": \"\\u041f\\u0435\\u0440\\u0435\\u0446 \\u0447\\u0438\\u043b\\u0438\", \"prot\": 1.9, \"fat\": 0.4, \"carb\": 9.0, \"kcal\": 40.0, \"gi\": 15.0}, {\"name\": \"\\u041f\\u0435\\u0440\\u043b\\u043e\\u0432\\u0430\\u044f \\u043a\\u0430\\u0448\\u0430\", \"prot\": 3.2, \"fat\": 0.5, \"carb\": 22.7, \"kcal\": 102.0, \"gi\": 30.0}, {\"name\": \"\\u041f\\u0435\\u0440\\u043b\\u043e\\u0432\\u0430\\u044f \\u043a\\u0440\\u0443\\u043f\\u0430\", \"prot\": 9.3, \"fat\": 1.1, \"carb\": 73.7, \"kcal\": 320.0, \"gi\": 30.0}, {\"name\": \"\\u041f\\u0435\\u0440\\u0441\\u0438\\u043a\\u0438\", \"prot\": 0.9, \"fat\": 0.0, \"carb\": 10.1, \"kcal\": 42.0, \"gi\": 35.0}, {\"name\": \"\\u041f\\u0435\\u0440\\u0441\\u0438\\u043a\\u043e\\u0432\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.8, \"fat\": 0.1, \"carb\": 9.1, \"kcal\": 37.0, \"gi\": 55.0}, {\"name\": \"\\u041f\\u0435\\u0441\\u0442\\u043e\", \"prot\": 5.0, \"fat\": 45.0, \"carb\": 6.0, \"kcal\": 454.0, \"gi\": 15.0}, {\"name\": \"\\u041f\\u0435\\u0442\\u0440\\u0443\\u0448\\u043a\\u0430 (\\u0437\\u0435\\u043b\\u0435\\u043d\\u044c)\", \"prot\": 3.8, \"fat\": 0.0, \"carb\": 8.0, \"kcal\": 45.0, \"gi\": 5.0}, {\"name\": \"\\u041f\\u0435\\u0442\\u0440\\u0443\\u0448\\u043a\\u0430 (\\u043a\\u043e\\u0440\\u0435\\u043d\\u044c)\", \"prot\": 1.6, \"fat\": 0.0, \"carb\": 11.2, \"kcal\": 48.0, \"gi\": 5.0}, {\"name\": \"\\u041f\\u0435\\u0447\\u0435\\u043d\\u044c\\u0435 \\u043e\\u0432\\u0441\\u044f\\u043d\\u043e\\u0435\", \"prot\": 6.5, \"fat\": 14.1, \"carb\": 71.4, \"kcal\": 430.0, \"gi\": 90.0}, {\"name\": \"\\u041f\\u0435\\u0447\\u0435\\u043d\\u044c\\u0435 \\u0441\\u0434\\u043e\\u0431\\u043d\\u043e\\u0435\", \"prot\": 10.5, \"fat\": 5.2, \"carb\": 76.0, \"kcal\": 447.0, \"gi\": 95.0}, {\"carb\": 3.5, \"prot\": 0.6, \"name\": \"\\u041f\\u0438\\u0432\\u043e 3.0%\", \"fat\": 0.0, \"kcal\": 37.0}, {\"carb\": 4.5, \"prot\": 0.8, \"name\": \"\\u041f\\u0438\\u0432\\u043e 4.5%\", \"fat\": 0.0, \"kcal\": 45.0}, {\"carb\": 4.1, \"prot\": 0.0, \"name\": \"\\u041f\\u0438\\u0432\\u043e \\u0431\\u0435\\u0437\\u0430\\u043b\\u043a\\u043e\\u0433\\u043e\\u043b\\u044c\\u043d\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 22.0}, {\"carb\": 4.0, \"prot\": 0.2, \"name\": \"\\u041f\\u0438\\u0432\\u043e \\u0442\\u0435\\u043c\\u043d\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 39.0}, {\"name\": \"\\u041f\\u0438\\u0440\\u043e\\u0436\\u043d\\u043e\\u0435 \\u0431\\u0438\\u0441\\u043a\\u0432\\u0438\\u0442\\u043d\\u043e\\u0435\", \"prot\": 4.9, \"fat\": 9.1, \"carb\": 84.1, \"kcal\": 338.0, \"gi\": 95.0}, {\"name\": \"\\u041f\\u0438\\u0440\\u043e\\u0436\\u043d\\u043e\\u0435 \\u0441\\u043b\\u043e\\u0435\\u043d\\u043e\\u0435\", \"prot\": 5.7, \"fat\": 38.3, \"carb\": 46.8, \"kcal\": 543.0, \"gi\": 95.0}, {\"carb\": 0.0, \"prot\": 18.5, \"name\": \"\\u041f\\u043b\\u043e\\u0442\\u0432\\u0430\", \"fat\": 0.4, \"kcal\": 108.0}, {\"name\": \"\\u041f\\u043e\\u0434\\u0431\\u0435\\u0440\\u0435\\u0437\\u043e\\u0432\\u0438\\u043a\\u0438 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 2.1, \"fat\": 1.2, \"carb\": 3.4, \"kcal\": 30.0, \"gi\": 15.0}, {\"name\": \"\\u041f\\u043e\\u0434\\u0431\\u0435\\u0440\\u0435\\u0437\\u043e\\u0432\\u0438\\u043a\\u0438 \\u0441\\u0443\\u0448\\u0435\\u043d\\u044b\\u0435\", \"prot\": 23.3, \"fat\": 9.5, \"carb\": 14.4, \"kcal\": 231.0, \"gi\": 15.0}, {\"name\": \"\\u041f\\u043e\\u0434\\u043e\\u0441\\u0438\\u043d\\u043e\\u0432\\u0438\\u043a\\u0438 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 3.3, \"fat\": 0.4, \"carb\": 3.5, \"kcal\": 31.0, \"gi\": 15.0}, {\"name\": \"\\u041f\\u043e\\u0434\\u043e\\u0441\\u0438\\u043d\\u043e\\u0432\\u0438\\u043a\\u0438 \\u0441\\u0443\\u0448\\u0435\\u043d\\u044b\\u0435\", \"prot\": 35.2, \"fat\": 5.4, \"carb\": 33.0, \"kcal\": 325.0, \"gi\": 15.0}, {\"carb\": 13.8, \"prot\": 0.0, \"name\": \"\\u041f\\u043e\\u0440\\u0442\\u0432\\u0435\\u0439\\u043d\", \"fat\": 0.0, \"kcal\": 167.0}, {\"name\": \"\\u041f\\u0440\\u043e\\u0441\\u0442\\u043e\\u043a\\u0432\\u0430\\u0448\\u0430 3.2%\", \"prot\": 2.9, \"fat\": 3.2, \"carb\": 4.0, \"kcal\": 57.0, \"gi\": 35.0}, {\"name\": \"\\u041f\\u0440\\u044f\\u043d\\u0438\\u043a\\u0438\", \"prot\": 4.4, \"fat\": 2.9, \"carb\": 77.1, \"kcal\": 333.0, \"gi\": 95.0}, {\"name\": \"\\u041f\\u0448\\u0435\\u043d\\u043d\\u0430\\u044f \\u043a\\u0430\\u0448\\u0430\", \"prot\": 3.0, \"fat\": 0.8, \"carb\": 17.2, \"kcal\": 92.0, \"gi\": 70.0}, {\"name\": \"\\u041f\\u0448\\u0435\\u043d\\u043e\", \"prot\": 11.5, \"fat\": 3.3, \"carb\": 69.3, \"kcal\": 348.0, \"gi\": 70.0}, {\"carb\": 1.1, \"prot\": 20.3, \"name\": \"\\u0420\\u0430\\u043a\\u0438 \\u0432\\u0430\\u0440\\u0435\\u043d\\u044b\\u0435\", \"fat\": 1.2, \"kcal\": 96.0}, {\"name\": \"\\u0420\\u0435\\u0432\\u0435\\u043d\\u044c\", \"prot\": 0.9, \"fat\": 0.2, \"carb\": 4.5, \"kcal\": 21.0, \"gi\": 15.0}, {\"name\": \"\\u0420\\u0435\\u0434\\u0438\\u0441\", \"prot\": 1.5, \"fat\": 0.0, \"carb\": 4.2, \"kcal\": 22.0, \"gi\": 15.0}, {\"name\": \"\\u0420\\u0435\\u0434\\u044c\\u043a\\u0430\", \"prot\": 1.7, \"fat\": 0.0, \"carb\": 7.1, \"kcal\": 33.0, \"gi\": 30.0}, {\"name\": \"\\u0420\\u0435\\u043f\\u0430\", \"prot\": 1.6, \"fat\": 0.0, \"carb\": 5.8, \"kcal\": 27.0, \"gi\": 30.0}, {\"name\": \"\\u0420\\u0438\\u0441 \\u0431\\u0430\\u0441\\u043c\\u0430\\u0442\\u0438\", \"prot\": 7.4, \"fat\": 1.8, \"carb\": 72.9, \"kcal\": 322.0, \"gi\": 50.0}, {\"name\": \"\\u0420\\u0438\\u0441 \\u0431\\u0435\\u043b\\u044b\\u0439\", \"prot\": 7.4, \"fat\": 1.8, \"carb\": 72.9, \"kcal\": 344.0, \"gi\": 70.0}, {\"name\": \"\\u0420\\u0438\\u0441 \\u0431\\u0443\\u0440\\u044b\\u0439\", \"prot\": 7.4, \"fat\": 1.8, \"carb\": 72.9, \"kcal\": 337.0, \"gi\": 45.0}, {\"name\": \"\\u0420\\u0438\\u0441 \\u0431\\u0443\\u0440\\u044b\\u0439 \\u0432\\u0430\\u0440\\u0435\\u043d\\u044b\\u0439\", \"prot\": 2.6, \"fat\": 0.9, \"carb\": 22.8, \"kcal\": 110.0, \"gi\": 45.0}, {\"name\": \"\\u0420\\u0438\\u0441\\u043e\\u0432\\u0430\\u044f \\u043a\\u0430\\u0448\\u0430\", \"prot\": 1.5, \"fat\": 0.2, \"carb\": 17.3, \"kcal\": 79.0, \"gi\": 75.0}, {\"name\": \"\\u0420\\u043e\\u0437\\u043c\\u0430\\u0440\\u0438\\u043d\", \"prot\": 3.3, \"fat\": 5.9, \"carb\": 20.7, \"kcal\": 131.0, \"gi\": 5.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0420\\u043e\\u043c\", \"fat\": 0.0, \"kcal\": 217.0}, {\"name\": \"\\u0420\\u0443\\u043a\\u043a\\u043e\\u043b\\u0430\", \"prot\": 2.6, \"fat\": 0.7, \"carb\": 2.1, \"kcal\": 25.0, \"gi\": 15.0}, {\"name\": \"\\u0420\\u044b\\u0436\\u0438\\u043a\\u0438 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 1.9, \"fat\": 0.7, \"carb\": 2.3, \"kcal\": 16.0, \"gi\": 15.0}, {\"name\": \"\\u0420\\u044f\\u0431\\u0438\\u043d\\u0430\", \"prot\": 1.6, \"fat\": 0.0, \"carb\": 12.2, \"kcal\": 57.0, \"gi\": 35.0}, {\"name\": \"\\u0420\\u044f\\u0436\\u0435\\u043d\\u043a\\u0430 2.5%\", \"prot\": 2.9, \"fat\": 2.5, \"carb\": 4.1, \"kcal\": 53.0, \"gi\": 35.0}, {\"name\": \"\\u0420\\u044f\\u0436\\u0435\\u043d\\u043a\\u0430 4.0%\", \"prot\": 2.9, \"fat\": 4.0, \"carb\": 4.1, \"kcal\": 68.0, \"gi\": 35.0}, {\"carb\": 0.0, \"prot\": 18.1, \"name\": \"\\u0421\\u0430\\u0437\\u0430\\u043d\", \"fat\": 5.2, \"kcal\": 119.0}, {\"carb\": 0.0, \"prot\": 18.3, \"name\": \"\\u0421\\u0430\\u0439\\u0440\\u0430\", \"fat\": 20.5, \"kcal\": 257.0}, {\"carb\": 0.0, \"prot\": 17.1, \"name\": \"\\u0421\\u0430\\u043b\\u0430\\u043a\\u0430\", \"fat\": 5.8, \"kcal\": 124.0}, {\"name\": \"\\u0421\\u0430\\u043b\\u0430\\u0442\", \"prot\": 1.2, \"fat\": 0.3, \"carb\": 1.3, \"kcal\": 12.0, \"gi\": 15.0}, {\"carb\": 1.1, \"prot\": 21.3, \"name\": \"\\u0421\\u0430\\u043b\\u044f\\u043c\\u0438\", \"fat\": 53.6, \"kcal\": 576.0}, {\"carb\": 1.6, \"prot\": 11.1, \"name\": \"\\u0421\\u0430\\u0440\\u0434\\u0435\\u043b\\u044c\\u043a\\u0438 \\u0413\\u043e\\u0432\\u044f\\u0436\\u044c\\u0438\", \"fat\": 18.2, \"kcal\": 215.0}, {\"carb\": 1.7, \"prot\": 10.1, \"name\": \"\\u0421\\u0430\\u0440\\u0434\\u0435\\u043b\\u044c\\u043a\\u0438 \\u0421\\u0432\\u0438\\u043d\\u044b\\u0435\", \"fat\": 31.8, \"kcal\": 330.0}, {\"name\": \"\\u0421\\u0430\\u0445\\u0430\\u0440\", \"prot\": 0.2, \"fat\": 0.0, \"carb\": 99.6, \"kcal\": 377.0, \"gi\": 70.0}, {\"name\": \"\\u0421\\u0432\\u0435\\u043a\\u043b\\u0430\", \"prot\": 1.7, \"fat\": 0.0, \"carb\": 10.5, \"kcal\": 46.0, \"gi\": 30.0}, {\"carb\": 0.0, \"prot\": 18.6, \"name\": \"\\u0421\\u0432\\u0438\\u043d\\u0430\\u044f \\u043f\\u0435\\u0447\\u0435\\u043d\\u044c\", \"fat\": 3.5, \"kcal\": 105.0}, {\"carb\": 0.0, \"prot\": 11.6, \"name\": \"\\u0421\\u0432\\u0438\\u043d\\u0438\\u043d\\u0430 \\u0436\\u0438\\u0440\\u043d\\u0430\\u044f\", \"fat\": 49.1, \"kcal\": 484.0}, {\"carb\": 0.0, \"prot\": 16.3, \"name\": \"\\u0421\\u0432\\u0438\\u043d\\u0438\\u043d\\u0430 \\u043d\\u0435\\u0436\\u0438\\u0440\\u043d\\u0430\\u044f\", \"fat\": 27.9, \"kcal\": 318.0}, {\"carb\": 0.0, \"prot\": 15.2, \"name\": \"\\u0421\\u0432\\u0438\\u043d\\u043e\\u0435 \\u0441\\u0435\\u0440\\u0434\\u0446\\u0435\", \"fat\": 3.1, \"kcal\": 87.0}, {\"carb\": 0.0, \"prot\": 14.4, \"name\": \"\\u0421\\u0432\\u0438\\u043d\\u043e\\u0439 \\u044f\\u0437\\u044b\\u043a\", \"fat\": 16.5, \"kcal\": 203.0}, {\"carb\": 0.0, \"prot\": 13.2, \"name\": \"\\u0421\\u0432\\u0438\\u043d\\u044b\\u0435 \\u043f\\u043e\\u0447\\u043a\\u0438\", \"fat\": 3.2, \"kcal\": 84.0}, {\"name\": \"\\u0421\\u0435\\u043b\\u044c\\u0434\\u0435\\u0440\\u0435\\u0439\", \"prot\": 0.9, \"fat\": 0.1, \"carb\": 2.1, \"kcal\": 12.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 17.3, \"name\": \"\\u0421\\u0435\\u043b\\u044c\\u0434\\u044c\", \"fat\": 19.9, \"kcal\": 248.0}, {\"carb\": 0.0, \"prot\": 20.9, \"name\": \"\\u0421\\u0435\\u043c\\u0433\\u0430\", \"fat\": 15.3, \"kcal\": 222.0}, {\"name\": \"\\u0421\\u0435\\u043c\\u0435\\u0447\\u043a\\u0438 \\u043f\\u043e\\u0434\\u0441\\u043e\\u043b\\u043d\\u0435\\u0447\\u043d\\u0438\\u043a\\u0430\", \"prot\": 20.9, \"fat\": 52.5, \"carb\": 5.4, \"kcal\": 582.0, \"gi\": 35.0}, {\"carb\": 0.0, \"prot\": 19.0, \"name\": \"\\u0421\\u0438\\u0433\", \"fat\": 7.3, \"kcal\": 141.0}, {\"carb\": 0.0, \"prot\": 18.0, \"name\": \"\\u0421\\u043a\\u0443\\u043c\\u0431\\u0440\\u0438\\u044f\", \"fat\": 9.5, \"kcal\": 158.0}, {\"name\": \"\\u0421\\u043b\\u0438\\u0432\\u0430\", \"prot\": 0.8, \"fat\": 0.0, \"carb\": 9.7, \"kcal\": 41.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u043b\\u0438\\u0432\\u043a\\u0438 10%\", \"prot\": 2.8, \"fat\": 10.0, \"carb\": 4.1, \"kcal\": 121.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u043b\\u0438\\u0432\\u043a\\u0438 20%\", \"prot\": 2.8, \"fat\": 20.0, \"carb\": 3.9, \"kcal\": 209.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u043c\\u0435\\u0442\\u0430\\u043d\\u0430 10%\", \"prot\": 3.0, \"fat\": 10.0, \"carb\": 2.9, \"kcal\": 118.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u043c\\u0435\\u0442\\u0430\\u043d\\u0430 15%\", \"prot\": 3.0, \"fat\": 15.0, \"carb\": 2.9, \"kcal\": 163.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u043c\\u0435\\u0442\\u0430\\u043d\\u0430 20%\", \"prot\": 3.0, \"fat\": 20.0, \"carb\": 2.9, \"kcal\": 208.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u043c\\u043e\\u0440\\u043e\\u0434\\u0438\\u043d\\u0430 \\u0431\\u0435\\u043b\\u0430\\u044f\", \"prot\": 0.4, \"fat\": 0.0, \"carb\": 8.5, \"kcal\": 37.0, \"gi\": 25.0}, {\"name\": \"\\u0421\\u043c\\u043e\\u0440\\u043e\\u0434\\u0438\\u043d\\u0430 \\u043a\\u0440\\u0430\\u0441\\u043d\\u0430\\u044f\", \"prot\": 0.6, \"fat\": 0.0, \"carb\": 8.7, \"kcal\": 39.0, \"gi\": 25.0}, {\"name\": \"\\u0421\\u043c\\u043e\\u0440\\u043e\\u0434\\u0438\\u043d\\u0430 \\u0447\\u0435\\u0440\\u043d\\u0430\\u044f\", \"prot\": 1.0, \"fat\": 0.0, \"carb\": 8.0, \"kcal\": 38.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 16.7, \"name\": \"\\u0421\\u043e\\u043c\", \"fat\": 8.4, \"kcal\": 141.0}, {\"carb\": 0.9, \"prot\": 10.3, \"name\": \"\\u0421\\u043e\\u0441\\u0438\\u0441\\u043a\\u0438 \\u0413\\u043e\\u0432\\u044f\\u0436\\u044c\\u0438\", \"fat\": 20.3, \"kcal\": 229.0}, {\"carb\": 3.3, \"prot\": 10.6, \"name\": \"\\u0421\\u043e\\u0441\\u0438\\u0441\\u043a\\u0438 \\u041a\\u0443\\u0440\\u0438\\u043d\\u044b\\u0435\", \"fat\": 22.1, \"kcal\": 242.0}, {\"carb\": 0.4, \"prot\": 9.8, \"name\": \"\\u0421\\u043e\\u0441\\u0438\\u0441\\u043a\\u0438 \\u041b\\u044e\\u0431\\u0438\\u0442\\u0435\\u043b\\u044c\\u0441\\u043a\\u0438\\u0435\", \"fat\": 30.1, \"kcal\": 318.0}, {\"carb\": 1.1, \"prot\": 11.3, \"name\": \"\\u0421\\u043e\\u0441\\u0438\\u0441\\u043a\\u0438 \\u041c\\u043e\\u043b\\u043e\\u0447\\u043d\\u044b\\u0435\", \"fat\": 23.9, \"kcal\": 260.0}, {\"carb\": 4.5, \"prot\": 9.2, \"name\": \"\\u0421\\u043e\\u0441\\u0438\\u0441\\u043a\\u0438 \\u0421\\u0432\\u0438\\u043d\\u044b\\u0435\", \"fat\": 23.2, \"kcal\": 284.0}, {\"name\": \"\\u0421\\u043e\\u0443\\u0441 \\u0432\\u0443\\u0441\\u0442\\u0435\\u0440\\u0441\\u043a\\u0438\\u0439\", \"prot\": 1.0, \"fat\": 0.1, \"carb\": 18.5, \"kcal\": 78.0, \"gi\": 20.0}, {\"name\": \"\\u0421\\u043e\\u0443\\u0441 \\u0440\\u044b\\u0431\\u043d\\u044b\\u0439\", \"prot\": 2.9, \"fat\": 1.7, \"carb\": 4.8, \"kcal\": 43.0, \"gi\": 20.0}, {\"name\": \"\\u0421\\u043e\\u0443\\u0441 \\u0441\\u043e\\u0435\\u0432\\u044b\\u0439\", \"prot\": 10.3, \"fat\": 0.0, \"carb\": 8.1, \"kcal\": 73.0, \"gi\": 20.0}, {\"name\": \"\\u0421\\u043e\\u044f \\u0431\\u043e\\u0431\\u044b\", \"prot\": 36.0, \"fat\": 20.0, \"carb\": 30.0, \"kcal\": 446.0, \"gi\": 15.0}, {\"name\": \"\\u0421\\u043f\\u0430\\u0433\\u0435\\u0442\\u0442\\u0438\", \"prot\": 10.4, \"fat\": 1.1, \"carb\": 71.5, \"kcal\": 344.0, \"gi\": 55.0}, {\"name\": \"\\u0421\\u043f\\u0430\\u0440\\u0436\\u0430\", \"prot\": 2.2, \"fat\": 0.1, \"carb\": 3.9, \"kcal\": 20.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 18.0, \"name\": \"\\u0421\\u0442\\u0430\\u0432\\u0440\\u0438\\u0434\\u0430\", \"fat\": 5.3, \"kcal\": 119.0}, {\"carb\": 0.0, \"prot\": 17.3, \"name\": \"\\u0421\\u0442\\u0435\\u0440\\u043b\\u044f\\u0434\\u044c\", \"fat\": 6.3, \"kcal\": 126.0}, {\"carb\": 0.0, \"prot\": 19.0, \"name\": \"\\u0421\\u0443\\u0434\\u0430\\u043a\", \"fat\": 0.7, \"kcal\": 81.0}, {\"name\": \"\\u0421\\u0443\\u0445\\u0430\\u0440\\u0438 \\u043f\\u0448\\u0435\\u043d\\u0438\\u0447\\u043d\\u044b\\u0435\", \"prot\": 11.6, \"fat\": 1.8, \"carb\": 72.1, \"kcal\": 327.0, \"gi\": 70.0}, {\"name\": \"\\u0421\\u0443\\u0448\\u043a\\u0438\", \"prot\": 11.1, \"fat\": 1.0, \"carb\": 73.2, \"kcal\": 335.0, \"gi\": 70.0}, {\"name\": \"\\u0421\\u044b\\u0440 \\u0433\\u043e\\u043b\\u043b\\u0430\\u043d\\u0434\\u0441\\u043a\\u0438\\u0439\", \"prot\": 26.4, \"fat\": 26.5, \"carb\": 0.0, \"kcal\": 352.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u044b\\u0440 \\u043f\\u043e\\u0448\\u0435\\u0445\\u043e\\u043d\\u0441\\u043a\\u0438\\u0439\", \"prot\": 26.4, \"fat\": 26.3, \"carb\": 0.0, \"kcal\": 348.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u044b\\u0440 \\u0440\\u043e\\u0441\\u0441\\u0438\\u0439\\u0441\\u043a\\u0438\\u0439\", \"prot\": 24.1, \"fat\": 29.8, \"carb\": 0.4, \"kcal\": 366.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u044b\\u0440 \\u0441\\u0443\\u043b\\u0443\\u0433\\u0443\\u043d\\u0438\", \"prot\": 20.0, \"fat\": 24.2, \"carb\": 0.0, \"kcal\": 293.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u044b\\u0440 \\u0447\\u0435\\u0434\\u0434\\u0435\\u0440\", \"prot\": 23.0, \"fat\": 32.0, \"carb\": 0.0, \"kcal\": 392.0, \"gi\": 35.0}, {\"name\": \"\\u0421\\u044b\\u0440\\u043e\\u0435\\u0436\\u043a\\u0438 \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 1.6, \"fat\": 0.8, \"carb\": 1.7, \"kcal\": 15.0, \"gi\": 15.0}, {\"name\": \"\\u0422\\u0432\\u043e\\u0440\\u043e\\u0433 \\u0436\\u0438\\u0440\\u043d\\u044b\\u0439\", \"prot\": 14.0, \"fat\": 18.0, \"carb\": 1.9, \"kcal\": 236.0, \"gi\": 30.0}, {\"name\": \"\\u0422\\u0432\\u043e\\u0440\\u043e\\u0433 \\u043d\\u0435\\u0436\\u0438\\u0440\\u043d\\u044b\\u0439\", \"prot\": 18.2, \"fat\": 0.6, \"carb\": 1.8, \"kcal\": 89.0, \"gi\": 30.0}, {\"name\": \"\\u0422\\u0432\\u043e\\u0440\\u043e\\u0433 \\u043f\\u043e\\u043b\\u0443\\u0436\\u0438\\u0440\\u043d\\u044b\\u0439\", \"prot\": 16.5, \"fat\": 9.0, \"carb\": 1.9, \"kcal\": 156.0, \"gi\": 30.0}, {\"carb\": 0.0, \"prot\": 19.9, \"name\": \"\\u0422\\u0435\\u043b\\u044f\\u0442\\u0438\\u043d\\u0430\", \"fat\": 1.1, \"kcal\": 91.0}, {\"name\": \"\\u0422\\u0438\\u043c\\u044c\\u044f\\u043d (\\u0447\\u0430\\u0431\\u0440\\u0435\\u0446)\", \"prot\": 5.6, \"fat\": 1.7, \"carb\": 10.5, \"kcal\": 101.0, \"gi\": 5.0}, {\"name\": \"\\u0422\\u043e\\u043c\\u0430\\u0442\\u043d\\u0430\\u044f \\u043f\\u0430\\u0441\\u0442\\u0430\", \"prot\": 2.5, \"fat\": 0.3, \"carb\": 16.7, \"kcal\": 80.0, \"gi\": 45.0}, {\"name\": \"\\u0422\\u043e\\u043c\\u0430\\u0442\\u043d\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.8, \"fat\": 0.1, \"carb\": 4.2, \"kcal\": 17.0, \"gi\": 30.0}, {\"name\": \"\\u0422\\u043e\\u043c\\u0430\\u0442\\u044b (\\u0433\\u0440\\u0443\\u043d\\u0442\\u043e\\u0432\\u044b\\u0435)\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 4.1, \"kcal\": 19.0, \"gi\": 30.0}, {\"name\": \"\\u0422\\u043e\\u043c\\u0430\\u0442\\u044b (\\u043f\\u0430\\u0440\\u043d\\u0438\\u043a\\u043e\\u0432\\u044b\\u0435)\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 2.6, \"kcal\": 12.0, \"gi\": 30.0}, {\"name\": \"\\u0422\\u043e\\u0444\\u0443\", \"prot\": 8.0, \"fat\": 1.9, \"carb\": 4.8, \"kcal\": 76.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 17.7, \"name\": \"\\u0422\\u0440\\u0435\\u0441\\u043a\\u0430\", \"fat\": 0.5, \"kcal\": 76.0}, {\"carb\": 0.0, \"prot\": 21.7, \"name\": \"\\u0422\\u0443\\u043d\\u0435\\u0446\", \"fat\": 1.3, \"kcal\": 95.0}, {\"name\": \"\\u0422\\u044b\\u043a\\u0432\\u0430\", \"prot\": 1.0, \"fat\": 0.1, \"carb\": 7.0, \"kcal\": 26.0, \"gi\": 75.0}, {\"name\": \"\\u0422\\u044b\\u043a\\u0432\\u0435\\u043d\\u043d\\u044b\\u0435 \\u0441\\u0435\\u043c\\u0435\\u0447\\u043a\\u0438\", \"prot\": 19.0, \"fat\": 19.0, \"carb\": 54.0, \"kcal\": 446.0, \"gi\": 25.0}, {\"carb\": 0.0, \"prot\": 13.3, \"name\": \"\\u0423\\u0433\\u043e\\u043b\\u044c\\u043d\\u0430\\u044f \\u0440\\u044b\\u0431\\u0430\", \"fat\": 11.4, \"kcal\": 153.0}, {\"carb\": 0.0, \"prot\": 14.2, \"name\": \"\\u0423\\u0433\\u043e\\u0440\\u044c \\u043c\\u043e\\u0440\\u0441\\u043a\\u043e\\u0439\", \"fat\": 30.7, \"kcal\": 331.0}, {\"name\": \"\\u0423\\u043a\\u0440\\u043e\\u043f\", \"prot\": 2.5, \"fat\": 0.5, \"carb\": 6.3, \"kcal\": 38.0, \"gi\": 5.0}, {\"name\": \"\\u0423\\u043a\\u0441\\u0443\\u0441 \\u0431\\u0430\\u043b\\u044c\\u0437\\u0430\\u043c\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439\", \"prot\": 0.5, \"fat\": 0.0, \"carb\": 17.0, \"kcal\": 88.0, \"gi\": 20.0}, {\"name\": \"\\u0423\\u043a\\u0441\\u0443\\u0441 \\u0440\\u0438\\u0441\\u043e\\u0432\\u044b\\u0439\", \"prot\": 0.3, \"fat\": 0.0, \"carb\": 13.0, \"kcal\": 54.0, \"gi\": 20.0}, {\"name\": \"\\u0423\\u043a\\u0441\\u0443\\u0441 \\u0441\\u0442\\u043e\\u043b\\u043e\\u0432\\u044b\\u0439 9%\", \"prot\": 0.0, \"fat\": 0.0, \"carb\": 3.0, \"kcal\": 32.0, \"gi\": 20.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0423\\u043a\\u0441\\u0443\\u0441 \\u044d\\u0441\\u0441\\u0435\\u043d\\u0446\\u0438\\u044f 70%\", \"fat\": 0.0, \"kcal\": 0.0}, {\"name\": \"\\u0423\\u043a\\u0441\\u0443\\u0441 \\u044f\\u0431\\u043b\\u043e\\u0447\\u043d\\u044b\\u0439 5%\", \"prot\": 0.0, \"fat\": 0.0, \"carb\": 0.7, \"kcal\": 18.0, \"gi\": 20.0}, {\"name\": \"\\u0423\\u0440\\u044e\\u043a\", \"prot\": 5.3, \"fat\": 0.0, \"carb\": 67.9, \"kcal\": 279.0, \"gi\": 65.0}, {\"carb\": 6.2, \"prot\": 14.4, \"name\": \"\\u0423\\u0441\\u0442\\u0440\\u0438\\u0446\\u044b\", \"fat\": 0.3, \"kcal\": 91.0}, {\"carb\": 0.0, \"prot\": 16.4, \"name\": \"\\u0423\\u0442\\u043a\\u0438\", \"fat\": 61.3, \"kcal\": 348.0}, {\"name\": \"\\u0424\\u0430\\u0441\\u043e\\u043b\\u044c\", \"prot\": 4.4, \"fat\": 0.0, \"carb\": 4.4, \"kcal\": 36.0, \"gi\": 25.0}, {\"name\": \"\\u0424\\u0438\\u043d\\u0438\\u043a\\u0438\", \"prot\": 2.5, \"fat\": 0.4, \"carb\": 69.6, \"kcal\": 277.0, \"gi\": 65.0}, {\"name\": \"\\u0424\\u0438\\u0441\\u0442\\u0430\\u0448\\u043a\\u0438\", \"prot\": 20.0, \"fat\": 50.5, \"carb\": 7.3, \"kcal\": 555.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 19.6, \"name\": \"\\u0424\\u043e\\u0440\\u0435\\u043b\\u044c\", \"fat\": 2.1, \"kcal\": 99.0}, {\"name\": \"\\u0424\\u0443\\u043d\\u0434\\u0443\\u043a\", \"prot\": 15.0, \"fat\": 61.0, \"carb\": 17.0, \"kcal\": 628.0, \"gi\": 15.0}, {\"name\": \"\\u0424\\u0443\\u043d\\u0447\\u043e\\u0437\\u0430\", \"prot\": 0.7, \"fat\": 0.5, \"carb\": 84.0, \"kcal\": 320.0, \"gi\": 45.0}, {\"name\": \"\\u0425\\u0430\\u043b\\u0432\\u0430 \\u043f\\u043e\\u0434\\u0441\\u043e\\u043b\\u043d\\u0435\\u0447\\u043d\\u0430\\u044f\", \"prot\": 11.4, \"fat\": 29.3, \"carb\": 54.6, \"kcal\": 519.0, \"gi\": 100.0}, {\"carb\": 0.0, \"prot\": 16.4, \"name\": \"\\u0425\\u0435\\u043a\", \"fat\": 2.3, \"kcal\": 84.0}, {\"name\": \"\\u0425\\u043b\\u0435\\u0431 \\u043f\\u0448\\u0435\\u043d\\u0438\\u0447\\u043d\\u044b\\u0439\", \"prot\": 7.4, \"fat\": 2.2, \"carb\": 53.0, \"kcal\": 246.0, \"gi\": 100.0}, {\"name\": \"\\u0425\\u043b\\u0435\\u0431 \\u0440\\u0436\\u0430\\u043d\\u043e\\u0439\", \"prot\": 4.7, \"fat\": 0.6, \"carb\": 49.5, \"kcal\": 210.0, \"gi\": 65.0}, {\"name\": \"\\u0425\\u0440\\u0435\\u043d\", \"prot\": 2.6, \"fat\": 0.0, \"carb\": 16.1, \"kcal\": 70.0, \"gi\": 30.0}, {\"name\": \"\\u0425\\u0443\\u0440\\u043c\\u0430\", \"prot\": 0.7, \"fat\": 0.0, \"carb\": 15.7, \"kcal\": 61.0, \"gi\": 50.0}, {\"name\": \"\\u0426\\u0438\\u043a\\u043e\\u0440\\u0438\\u0439\", \"prot\": 1.7, \"fat\": 0.2, \"carb\": 4.1, \"kcal\": 21.0, \"gi\": 15.0}, {\"carb\": 0.5, \"prot\": 18.5, \"name\": \"\\u0426\\u044b\\u043f\\u043b\\u044f\\u0442\\u0430\", \"fat\": 7.9, \"kcal\": 159.0}, {\"name\": \"\\u0427\\u0435\\u0440\\u0435\\u0448\\u043d\\u044f\", \"prot\": 1.3, \"fat\": 0.0, \"carb\": 12.5, \"kcal\": 54.0, \"gi\": 40.0}, {\"name\": \"\\u0427\\u0435\\u0440\\u043d\\u0438\\u043a\\u0430\", \"prot\": 1.2, \"fat\": 0.0, \"carb\": 8.8, \"kcal\": 41.0, \"gi\": 30.0}, {\"name\": \"\\u0427\\u0435\\u0440\\u043d\\u043e\\u0441\\u043b\\u0438\\u0432\", \"prot\": 2.7, \"fat\": 0.0, \"carb\": 65.3, \"kcal\": 262.0, \"gi\": 40.0}, {\"carb\": 0.0, \"prot\": 0.0, \"name\": \"\\u0427\\u0435\\u0440\\u043d\\u044b\\u0439 \\u0447\\u0430\\u0439 \\u0431\\u0435\\u0437 \\u0441\\u0430\\u0445\\u0430\\u0440\\u0430\", \"fat\": 0.0, \"kcal\": 0.0}, {\"name\": \"\\u0427\\u0435\\u0441\\u043d\\u043e\\u043a\", \"prot\": 6.6, \"fat\": 0.0, \"carb\": 21.1, \"kcal\": 103.0, \"gi\": 30.0}, {\"name\": \"\\u0427\\u0435\\u0447\\u0435\\u0432\\u0438\\u0446\\u0430\", \"prot\": 9.0, \"fat\": 0.4, \"carb\": 20.0, \"kcal\": 116.0, \"gi\": 25.0}, {\"carb\": 5.2, \"prot\": 0.3, \"name\": \"\\u0428\\u0430\\u043c\\u043f\\u0430\\u043d\\u0441\\u043a\\u043e\\u0435\", \"fat\": 0.0, \"kcal\": 88.0}, {\"name\": \"\\u0428\\u0430\\u043c\\u043f\\u0438\\u043d\\u044c\\u043e\\u043d\\u044b \\u0441\\u0432\\u0435\\u0436\\u0438\\u0435\", \"prot\": 4.3, \"fat\": 0.9, \"carb\": 1.4, \"kcal\": 29.0, \"gi\": 15.0}, {\"name\": \"\\u0428\\u0435\\u043b\\u043a\\u043e\\u0432\\u0438\\u0446\\u0430\", \"prot\": 0.6, \"fat\": 0.0, \"carb\": 12.5, \"kcal\": 50.0, \"gi\": 35.0}, {\"name\": \"\\u0428\\u0438\\u043f\\u043e\\u0432\\u043d\\u0438\\u043a \\u0441\\u0432\\u0435\\u0436\\u0438\\u0439\", \"prot\": 1.5, \"fat\": 0.0, \"carb\": 24.2, \"kcal\": 106.0, \"gi\": 35.0}, {\"name\": \"\\u0428\\u0438\\u043f\\u043e\\u0432\\u043d\\u0438\\u043a \\u0441\\u0443\\u0448\\u0435\\u043d\\u044b\\u0439\", \"prot\": 4.5, \"fat\": 0.0, \"carb\": 60.1, \"kcal\": 259.0, \"gi\": 35.0}, {\"name\": \"\\u0428\\u043e\\u043a\\u043e\\u043b\\u0430\\u0434 \\u0433\\u043e\\u0440\\u044c\\u043a\\u0438\\u0439\", \"prot\": 5.2, \"fat\": 35.6, \"carb\": 52.4, \"kcal\": 546.0, \"gi\": 30.0}, {\"name\": \"\\u0428\\u043e\\u043a\\u043e\\u043b\\u0430\\u0434 \\u043c\\u043e\\u043b\\u043e\\u0447\\u043d\\u044b\\u0439\", \"prot\": 6.7, \"fat\": 35.6, \"carb\": 52.4, \"kcal\": 552.0, \"gi\": 70.0}, {\"name\": \"\\u0428\\u043f\\u0438\\u043d\\u0430\\u0442\", \"prot\": 2.5, \"fat\": 0.0, \"carb\": 2.6, \"kcal\": 22.0, \"gi\": 15.0}, {\"name\": \"\\u0429\\u0430\\u0432\\u0435\\u043b\\u044c\", \"prot\": 1.6, \"fat\": 0.0, \"carb\": 5.5, \"kcal\": 29.0, \"gi\": 15.0}, {\"carb\": 0.0, \"prot\": 18.2, \"name\": \"\\u0429\\u0443\\u043a\\u0430\", \"fat\": 0.8, \"kcal\": 83.0}, {\"name\": \"\\u042d\\u043d\\u0435\\u0440\\u0433\\u0435\\u0442\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439 \\u043d\\u0430\\u043f\\u0438\\u0442\\u043e\\u043a\", \"prot\": 0.0, \"fat\": 0.0, \"carb\": 11.4, \"kcal\": 47.0, \"gi\": 100.0}, {\"name\": \"\\u042f\\u0431\\u043b\\u043e\\u043a\\u0438\", \"prot\": 0.5, \"fat\": 0.0, \"carb\": 11.4, \"kcal\": 48.0, \"gi\": 35.0}, {\"name\": \"\\u042f\\u0431\\u043b\\u043e\\u043a\\u0438 \\u0441\\u0443\\u0448\\u0435\\u043d\\u043d\\u044b\\u0435\", \"prot\": 3.1, \"fat\": 0.0, \"carb\": 68.3, \"kcal\": 275.0, \"gi\": 30.0}, {\"name\": \"\\u042f\\u0431\\u043b\\u043e\\u0447\\u043d\\u044b\\u0439 \\u0441\\u043e\\u043a\", \"prot\": 0.5, \"fat\": 0.4, \"carb\": 9.7, \"kcal\": 42.0, \"gi\": 45.0}, {\"carb\": 0.0, \"prot\": 10.3, \"name\": \"\\u042f\\u0437\\u044b\\u043a \\u043c\\u043e\\u0440\\u0441\\u043a\\u043e\\u0439\", \"fat\": 5.3, \"kcal\": 89.0}, {\"carb\": 5.1, \"prot\": 45.3, \"name\": \"\\u042f\\u0438\\u0447\\u043d\\u044b\\u0439 \\u043f\\u043e\\u0440\\u043e\\u0448\\u043e\\u043a\", \"fat\": 37.3, \"kcal\": 545.0}, {\"carb\": 0.6, \"prot\": 12.7, \"name\": \"\\u042f\\u0439\\u0446\\u043e \\u043a\\u0443\\u0440\\u0438\\u043d\\u043e\\u0435\", \"fat\": 11.1, \"kcal\": 153.0}, {\"carb\": 0.8, \"prot\": 11.9, \"name\": \"\\u042f\\u0439\\u0446\\u043e \\u043f\\u0435\\u0440\\u0435\\u043f\\u0435\\u043b\\u0438\\u043d\\u043e\\u0435\", \"fat\": 13.3, \"kcal\": 170.0}, {\"carb\": 0.8, \"prot\": 12.4, \"name\": \"\\u042f\\u0439\\u0446\\u043e \\u0441\\u0442\\u0440\\u0430\\u0443\\u0441\\u0438\\u043d\\u043e\\u0435\", \"fat\": 11.5, \"kcal\": 118.0}, {\"carb\": 0.2, \"prot\": 13.5, \"name\": \"\\u042f\\u0439\\u0446\\u043e \\u0443\\u0442\\u0438\\u043d\\u043e\\u0435\", \"fat\": 14.1, \"kcal\": 176.0}, {\"name\": \"\\u042f\\u0447\\u043d\\u0435\\u0432\\u0430\\u044f \\u043a\\u0430\\u0448\\u0430\", \"prot\": 1.4, \"fat\": 0.3, \"carb\": 18.7, \"kcal\": 84.0, \"gi\": 70.0}, {\"name\": \"\\u042f\\u0447\\u043d\\u0435\\u0432\\u044b\\u0435 \\u0445\\u043b\\u043e\\u043f\\u044c\\u044f\", \"prot\": 9.1, \"fat\": 3.2, \"carb\": 79.7, \"kcal\": 345.0, \"gi\": 70.0}]}","import m from 'mithril'\nimport Stream from 'mithril/stream'\nimport {products} from './products'\n\nfunction findProduct (name) {\n    return products.find(function (p) {\n        return p.name === name\n    })\n}\n\nfunction loadProductProps (name, amount) {\n    var product = findProduct(name)\n    if (!product) return\n    product = Object.assign({}, product)\n    product.amount = Stream(amount || 100)\n    product.key = Math.ceil(1e9 * Math.random())\n    return product\n}\n\nvar selectedProducts = []\n\nfunction loadSelectedProducts () {\n    var savedProducts = JSON.parse(localStorage.getItem('selectedProducts') || \"[]\")\n    for (var i=0; i<savedProducts.length; i+=1) {\n        var p = savedProducts[i]\n        var product = loadProductProps(p.name, p.amount)\n        if (!product) continue\n        selectedProducts.push(product)\n    }\n}\n\nfunction removeSelectedProduct(key) {\n    var ind = selectedProducts.findIndex(function (p) {\n        return p.key === key\n    })\n    if (ind >= 0) {\n        selectedProducts.splice(ind, 1)\n        saveSelectedProducts()\n    }\n}\n\nfunction saveSelectedProducts () {\n    var savedProducts = []\n    selectedProducts.map(function (p) {\n        savedProducts.push({name: p.name, amount: p.amount()})\n    })\n    localStorage.setItem('selectedProducts', JSON.stringify(savedProducts))\n}\n\nvar currentProduct = Stream(null)\n\nvar ProductSelector = {\n    view: function (vnode) {\n        return [\n            m('input#productInput[type=text][list=product-list][placeholder=\"Выберите продукт...\"]', {\n                onchange: m.withAttr('value', currentProduct),\n                value: currentProduct()\n            }),\n            m('button#addProductBtn', {\n                title: 'Добавить продукт',\n                disabled: !findProduct(currentProduct()),\n                onclick: function () {\n                    if (!currentProduct()) return\n                    var product = loadProductProps(currentProduct())\n                    if (!product) return\n                    currentProduct(null)\n                    selectedProducts.push(product)\n                    saveSelectedProducts()\n                }\n            }, '+'),\n            m('datalist#product-list', products.map(function (p) {\n                return m('option', p.name)\n            }))\n        ]\n    }\n}\n\nvar ProductTable = {\n    view: function (vnode) {\n        var rows = [m('tr', {key: 0}, [\n            m('th'),\n            m('th'), \n            m('th', 'Вес'),\n            m('th', 'Ккал'),\n            m('th', 'Бел'),\n            m('th', 'Жир'),\n            m('th', 'Угл'),\n            m('th', 'ГИ'),\n        ])]\n        var summary = {kcal: 0, prot: 0, fat: 0, carb: 0, weight: 0}\n        selectedProducts.map(function (p) {\n            var k = p.amount() / 100\n            rows.push(m('tr', {key: p.key}, [\n                m('td', m('button', {\n                    title: 'Убрать ' + p.name,\n                    onclick: function () {\n                        removeSelectedProduct(p.key)\n                    }\n                }, 'x')),\n                m('td.name', p.name),\n                m('td', m('input.amountInput[type=number]', {\n                    min: 0,\n                    oninput: function () {\n                        p.amount(this.value)\n                        saveSelectedProducts()\n                    },\n                    value: p.amount()\n                })),\n                m('td.num', (k*p.kcal).toFixed(1)),\n                m('td.num', (k*p.prot).toFixed(1)),\n                m('td.num', (k*p.fat).toFixed(1)),\n                m('td.num', (k*p.carb).toFixed(1)),\n                m('td.gi', p.gi || '-'),\n            ]))\n            summary.weight += k\n            summary.kcal += k*p.kcal\n            summary.prot += k*p.prot\n            summary.fat += k*p.fat\n            summary.carb += k*p.carb\n        })\n        rows.push(m('tr', {key: -2}, [\n            m('th'),\n            m('th.name', 'Всего:'),\n            m('th', (100*summary.weight).toFixed()), \n            m('th.num', summary.kcal.toFixed(1)),\n            m('th.num', summary.prot.toFixed(1)),\n            m('th.num', summary.fat.toFixed(1)),\n            m('th.num', summary.carb.toFixed(1)),\n            m('th'),\n        ]))\n        summary.weight && rows.push(m('tr', {key: -1}, [\n            m('th'),\n            m('th.name', 'В 100гр:'),\n            m('th'), \n            m('th.num', (summary.kcal / summary.weight).toFixed(1)),\n            m('th.num', (summary.prot / summary.weight).toFixed(1)),\n            m('th.num', (summary.fat  / summary.weight).toFixed(1)),\n            m('th.num', (summary.carb / summary.weight).toFixed(1)),\n            m('th'),\n        ]))\n        return m('table#productTable', rows)\n    }\n}\n\nloadSelectedProducts()\n\nm.mount(document.body, {view: function () {\n    return [m(ProductSelector), m(ProductTable)]\n}})\n"]}